
/* parser generated by jison 0.6.0-186 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time; 
 *               when such a collision is detected an exception is thrown to prevent the generated run-time 
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in 
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    mergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */
var parser = (function () {

// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) { // V8
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';


// Note:
    //
    // This code section is specifically targetting error recovery handling in the 
    // generated parser when the error recovery is unwinding the parse stack to arrive 
    // at the targeted error handling production rule.
    //
    // This code is treated like any production rule action code chunk:
    // Special variables `$$`, `$@`, etc. are recognized, while the 'rule terms' can be
    // addressed via `$n` macros as in usual rule actions, only here we DO NOT validate
    // their usefulness as the 'error reduce action' accepts a variable number of 
    // production terms (available in `yyrulelength` in case you wish to address the 
    // input terms directly in the `yyvstack` and `yylstack` arrays, for instance).
    //
    // This example recovery rule simply collects all parse info stored in the parse
    // stacks and which would otherwise be discarded immediately after this call, thus
    // keeping all parse info details up to the point of actual error RECOVERY available
    // to userland code in the handling 'error rule' in this grammar.;


// helper: reconstruct the productions[] table
function bp(s) {
    var rv = [];
    var p = s.pop;
    var r = s.rule;
    for (var i = 0, l = p.length; i < l; i++) {
        rv.push([
            p[i],
            r[i]
        ]);
    }
    return rv;
}



// helper: reconstruct the defaultActions[] table
function bda(s) {
    var rv = {};
    var d = s.idx;
    var g = s.goto;
    for (var i = 0, l = d.length; i < l; i++) {
        var j = d[i];
        rv[j] = g[i];
    }
    return rv;
}



// helper: reconstruct the 'goto' table
function bt(s) {
    var rv = [];
    var d = s.len;
    var y = s.symbol;
    var t = s.type;
    var a = s.state;
    var m = s.mode;
    var g = s.goto;
    for (var i = 0, l = d.length; i < l; i++) {
        var n = d[i];
        var q = {};
        for (var j = 0; j < n; j++) {
            var z = y.shift();
            switch (t.shift()) {
            case 2:
                q[z] = [
                    m.shift(),
                    g.shift()
                ];
                break;

            case 0:
                q[z] = a.shift();
                break;

            default:
                // type === 1: accept
                q[z] = [
                    3
                ];
            }
        }
        rv.push(q);
    }
    return rv;
}



// helper: runlength encoding with increment step: code, length: step (default step = 0)
// `this` references an array
function s(c, l, a) {
    a = a || 0;
    for (var i = 0; i < l; i++) {
        this.push(c);
        c += a;
    }
}

// helper: duplicate sequence from *relative* offset and length.
// `this` references an array
function c(i, l) {
    i = this.length - i;
    for (l += i; i < l; i++) {
        this.push(this[i]);
    }
}

// helper: unpack an array using helpers and data, all passed in an array argument 'a'.
function u(a) {
    var rv = [];
    for (var i = 0, l = a.length; i < l; i++) {
        var e = a[i];
        // Is this entry a helper function?
        if (typeof e === 'function') {
            i++;
            e.apply(rv, a[i]);
        } else {
            rv.push(e);
        }
    }
    return rv;
}


var parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   no default action: ............... false
    //   no try..catch: ................... false
    //   no default resolve on conflict:    false
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   false
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... commonjs
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   all actions are default: ......... false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. false
    //   uses YYERROR: .................... true
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... true
    //   assigns location: ................ true
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   has error recovery: .............. true
    //
    // --------- END OF REPORT -----------

trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr",
  hasPartialLrUpgradeOnConflict: true,
  errorRecoveryTokenDiscardCount: 3
},
symbols_: {
  "$accept": 0,
  "$end": 1,
  "%%": 14,
  "(": 7,
  ")": 8,
  "*": 9,
  "+": 11,
  ":": 5,
  ";": 4,
  "=": 3,
  "?": 10,
  "ACTION": 15,
  "ACTION_BODY": 42,
  "ALIAS": 38,
  "ARROW_ACTION": 41,
  "CODE": 45,
  "DEBUG": 19,
  "EOF": 1,
  "EOF_ID": 39,
  "EPSILON": 37,
  "ID": 23,
  "IMPORT": 21,
  "INCLUDE": 43,
  "INIT_CODE": 22,
  "INTEGER": 36,
  "LEFT": 32,
  "LEX_BLOCK": 17,
  "NAME": 24,
  "NONASSOC": 34,
  "OPTIONS": 26,
  "OPTIONS_END": 27,
  "OPTION_STRING_VALUE": 28,
  "OPTION_VALUE": 29,
  "PARSER_TYPE": 31,
  "PARSE_PARAM": 30,
  "PATH": 44,
  "PREC": 40,
  "RIGHT": 33,
  "START": 16,
  "STRING": 25,
  "TOKEN": 18,
  "TOKEN_TYPE": 35,
  "UNKNOWN_DECL": 20,
  "action": 84,
  "action_body": 85,
  "action_comments_body": 86,
  "action_ne": 83,
  "associativity": 60,
  "declaration": 50,
  "declaration_list": 49,
  "error": 2,
  "expression": 78,
  "extra_parser_module_code": 87,
  "full_token_definitions": 62,
  "grammar": 68,
  "handle": 75,
  "handle_action": 74,
  "handle_list": 73,
  "handle_sublist": 76,
  "id": 82,
  "id_list": 67,
  "import_name": 52,
  "import_path": 53,
  "include_macro_code": 88,
  "init_code_name": 51,
  "module_code_chunk": 89,
  "one_full_token": 63,
  "operator": 59,
  "option": 56,
  "option_list": 55,
  "optional_action_header_block": 48,
  "optional_end_block": 47,
  "optional_module_code_chunk": 90,
  "optional_production_description": 72,
  "optional_token_type": 64,
  "options": 54,
  "parse_params": 57,
  "parser_type": 58,
  "prec": 80,
  "production": 70,
  "production_id": 71,
  "production_list": 69,
  "spec": 46,
  "suffix": 79,
  "suffixed_expression": 77,
  "symbol": 81,
  "token_description": 66,
  "token_list": 61,
  "token_value": 65,
  "{": 12,
  "|": 6,
  "}": 13
},
terminals_: {
  1: "EOF",
  2: "error",
  3: "=",
  4: ";",
  5: ":",
  6: "|",
  7: "(",
  8: ")",
  9: "*",
  10: "?",
  11: "+",
  12: "{",
  13: "}",
  14: "%%",
  15: "ACTION",
  16: "START",
  17: "LEX_BLOCK",
  18: "TOKEN",
  19: "DEBUG",
  20: "UNKNOWN_DECL",
  21: "IMPORT",
  22: "INIT_CODE",
  23: "ID",
  24: "NAME",
  25: "STRING",
  26: "OPTIONS",
  27: "OPTIONS_END",
  28: "OPTION_STRING_VALUE",
  29: "OPTION_VALUE",
  30: "PARSE_PARAM",
  31: "PARSER_TYPE",
  32: "LEFT",
  33: "RIGHT",
  34: "NONASSOC",
  35: "TOKEN_TYPE",
  36: "INTEGER",
  37: "EPSILON",
  38: "ALIAS",
  39: "EOF_ID",
  40: "PREC",
  41: "ARROW_ACTION",
  42: "ACTION_BODY",
  43: "INCLUDE",
  44: "PATH",
  45: "CODE"
},
TERROR: 2,
EOF: 1,

// internals: defined here so the object *structure* doesn't get modified by parse() et al,
// thus helping JIT compilers like Chrome V8.
originalQuoteName: null,
originalParseError: null,
cleanupAfterParse: null,
constructParseErrorInfo: null,
mergeLocationInfo: null,

__reentrant_call_depth: 0,      // INTERNAL USE ONLY
__error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

// APIs which will be set up depending on user action code analysis:
//yyRecovering: 0,
//yyErrOk: 0,
//yyClearIn: 0,

// Helper APIs
// -----------

// Helper function which can be overridden by user code later on: put suitable quotes around
// literal IDs in a description string.
quoteName: function parser_quoteName(id_str) {
    return '"' + id_str + '"';
},

// Return a more-or-less human-readable description of the given symbol, when available,
// or the symbol itself, serving as its own 'description' for lack of something better to serve up.
//
// Return NULL when the symbol is unknown to the parser.
describeSymbol: function parser_describeSymbol(symbol) {
    if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
        return this.terminal_descriptions_[symbol];
    }
    else if (symbol === this.EOF) {
        return 'end of input';
    }
    else if (this.terminals_[symbol]) {
        return this.quoteName(this.terminals_[symbol]);
    }
    // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
    //
    // An example of this may be where a rule's action code contains a call like this:
    //
    //      parser.describeSymbol(#$)
    //
    // to obtain a human-readable description or name of the current grammar rule. This comes handy in
    // error handling action code blocks, for example.
    var s = this.symbols_;
    for (var key in s) {
        if (s[key] === symbol) {
            return key;
        }
    }
    return null;
},

// Produce a (more or less) human-readable list of expected tokens at the point of failure.
//
// The produced list may contain token or token set descriptions instead of the tokens
// themselves to help turning this output into something that easier to read by humans
// unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
// expected terminals and nonterminals is produced.
//
// The returned list (array) will not contain any duplicate entries.
collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
    var TERROR = this.TERROR;
    var tokenset = [];
    var check = {};
    // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
    // If so, use that one instead of the less palatable token set.
    if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
        return [
            this.state_descriptions_[state]
        ];
    }
    for (var p in this.table[state]) {
        p = +p;
        if (p !== TERROR) {
            var d = do_not_describe ? p : this.describeSymbol(p);
            if (d && !check[d]) {
                tokenset.push(d);
                check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
            }
        }
    }
    return tokenset;
},
productions_: bp({
  pop: u([
  s,
  [46, 3],
  47,
  47,
  s,
  [48, 3],
  s,
  [49, 3],
  s,
  [50, 19],
  s,
  [51, 3],
  52,
  52,
  53,
  53,
  s,
  [54, 3],
  55,
  55,
  s,
  [56, 6],
  57,
  57,
  58,
  58,
  59,
  59,
  s,
  [60, 3],
  61,
  61,
  62,
  62,
  s,
  [63, 3],
  64,
  s,
  [64, 4, 1],
  67,
  68,
  69,
  69,
  s,
  [70, 3],
  71,
  71,
  72,
  72,
  s,
  [73, 4],
  s,
  [74, 3],
  75,
  75,
  76,
  76,
  77,
  77,
  s,
  [78, 5],
  s,
  [79, 4],
  s,
  [80, 3],
  81,
  81,
  82,
  s,
  [83, 5],
  84,
  84,
  s,
  [85, 5],
  86,
  86,
  87,
  87,
  88,
  88,
  s,
  [89, 3],
  90,
  90
]),
  rule: u([
  5,
  5,
  3,
  0,
  2,
  0,
  s,
  [2, 3],
  c,
  [4, 3],
  1,
  1,
  c,
  [3, 3],
  s,
  [1, 5],
  s,
  [3, 5],
  s,
  [2, 3],
  c,
  [15, 9],
  c,
  [11, 4],
  c,
  [20, 7],
  s,
  [2, 4],
  s,
  [1, 3],
  2,
  1,
  2,
  2,
  c,
  [15, 3],
  0,
  c,
  [11, 7],
  c,
  [36, 4],
  3,
  3,
  1,
  0,
  3,
  c,
  [39, 4],
  c,
  [79, 4],
  c,
  [9, 3],
  c,
  [39, 4],
  3,
  3,
  c,
  [34, 5],
  c,
  [40, 5],
  c,
  [32, 3],
  s,
  [1, 3],
  0,
  0,
  1,
  5,
  4,
  4,
  c,
  [53, 3],
  c,
  [85, 4],
  c,
  [35, 3],
  0
])
}),
performAction: function parser__PerformAction(yyloc, yystate /* action[1] */, yysp, yyrulelength, yyvstack, yylstack) {

          /* this == yyval */

          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
          var yy = this.yy;
          var yyparser = yy.parser;
          var yylexer = yy.lexer;

          

          switch (yystate) {
case 0:
    /*! Production::    $accept : spec $end */
    // default action (generated by JISON):
    this.$ = yyvstack[yysp - 1];
    this._$ = yylstack[yysp - 1];
    break;

case 1:
    /*! Production::    spec : declaration_list "%%" grammar optional_end_block EOF */
    this.$ = yyvstack[yysp - 4];
    if (yyvstack[yysp - 1] && yyvstack[yysp - 1].trim() !== '') {
        yy.addDeclaration(this.$, { include: yyvstack[yysp - 1] });
    }
    return extend(this.$, yyvstack[yysp - 2]);
    break;

case 2:
    /*! Production::    spec : declaration_list "%%" grammar error EOF */
    yyparser.yyError("Maybe you did not correctly separate trailing code from the grammar rule set with a '%%' marker on an otherwise empty line?");
    break;

case 3:
    /*! Production::    spec : declaration_list error EOF */
    yyparser.yyError("Maybe you did not correctly separate the parse 'header section' (token definitions, options, lexer spec, etc.) from the grammar rule set with a '%%' on an otherwise empty line?");
    break;

case 4:
    /*! Production::    optional_end_block : ε */
    this.$ = undefined;
    break;

case 5:
    /*! Production::    optional_end_block : "%%" extra_parser_module_code */
case 31:
    /*! Production::    init_code_name : ID */
case 32:
    /*! Production::    init_code_name : NAME */
case 33:
    /*! Production::    init_code_name : STRING */
case 34:
    /*! Production::    import_name : ID */
case 35:
    /*! Production::    import_name : STRING */
case 36:
    /*! Production::    import_path : ID */
case 37:
    /*! Production::    import_path : STRING */
case 49:
    /*! Production::    parse_params : PARSE_PARAM token_list */
case 51:
    /*! Production::    parser_type : PARSER_TYPE symbol */
case 66:
    /*! Production::    optional_token_type : TOKEN_TYPE */
case 67:
    /*! Production::    token_value : INTEGER */
case 68:
    /*! Production::    token_description : STRING */
case 79:
    /*! Production::    optional_production_description : STRING */
case 94:
    /*! Production::    expression : ID */
case 100:
    /*! Production::    suffix : "*" */
case 101:
    /*! Production::    suffix : "?" */
case 102:
    /*! Production::    suffix : "+" */
case 106:
    /*! Production::    symbol : id */
case 107:
    /*! Production::    symbol : STRING */
case 108:
    /*! Production::    id : ID */
case 111:
    /*! Production::    action_ne : ACTION */
case 112:
    /*! Production::    action_ne : include_macro_code */
case 114:
    /*! Production::    action : action_ne */
case 117:
    /*! Production::    action_body : action_comments_body */
case 121:
    /*! Production::    action_comments_body : ACTION_BODY */
case 123:
    /*! Production::    extra_parser_module_code : optional_module_code_chunk */
case 127:
    /*! Production::    module_code_chunk : CODE */
case 130:
    /*! Production::    optional_module_code_chunk : module_code_chunk */
    this.$ = yyvstack[yysp];
    break;

case 6:
    /*! Production::    optional_action_header_block : ε */
case 10:
    /*! Production::    declaration_list : ε */
    this.$ = {};
    break;

case 7:
    /*! Production::    optional_action_header_block : optional_action_header_block ACTION */
case 8:
    /*! Production::    optional_action_header_block : optional_action_header_block include_macro_code */
    this.$ = yyvstack[yysp - 1];
    yy.addDeclaration(this.$, { actionInclude: yyvstack[yysp] });
    break;

case 9:
    /*! Production::    declaration_list : declaration_list declaration */
    this.$ = yyvstack[yysp - 1]; yy.addDeclaration(this.$, yyvstack[yysp]);
    break;

case 11:
    /*! Production::    declaration_list : declaration_list error */
case 28:
    /*! Production::    declaration : START error */
case 29:
    /*! Production::    declaration : TOKEN error */
case 30:
    /*! Production::    declaration : IMPORT error */
case 40:
    /*! Production::    options : OPTIONS error */
case 48:
    /*! Production::    option : NAME error */
case 50:
    /*! Production::    parse_params : PARSE_PARAM error */
case 52:
    /*! Production::    parser_type : PARSER_TYPE error */
case 54:
    /*! Production::    operator : associativity error */
case 76:
    /*! Production::    production : production_id error */
case 87:
    /*! Production::    handle_action : EPSILON error */
case 104:
    /*! Production::    prec : PREC error */
    // default action (generated by JISON):
    this.$ = yyvstack.slice(yysp - 1, yysp + 1);
    this._$ = yyparser.mergeLocationInfo(yysp - 1, yysp);
    break;

case 12:
    /*! Production::    declaration : START id */
    this.$ = {start: yyvstack[yysp]};
    break;

case 13:
    /*! Production::    declaration : LEX_BLOCK */
    this.$ = {lex: {text: yyvstack[yysp], position: yylstack[yysp]}};
    break;

case 14:
    /*! Production::    declaration : operator */
    this.$ = {operator: yyvstack[yysp]};
    break;

case 15:
    /*! Production::    declaration : TOKEN full_token_definitions */
    this.$ = {token_list: yyvstack[yysp]};
    break;

case 16:
    /*! Production::    declaration : ACTION */
case 17:
    /*! Production::    declaration : include_macro_code */
    this.$ = {include: yyvstack[yysp]};
    break;

case 18:
    /*! Production::    declaration : parse_params */
    this.$ = {parseParams: yyvstack[yysp]};
    break;

case 19:
    /*! Production::    declaration : parser_type */
    this.$ = {parserType: yyvstack[yysp]};
    break;

case 20:
    /*! Production::    declaration : options */
    this.$ = {options: yyvstack[yysp]};
    break;

case 21:
    /*! Production::    declaration : DEBUG */
    this.$ = {options: [['debug', true]]};
    break;

case 22:
    /*! Production::    declaration : UNKNOWN_DECL */
    this.$ = {unknownDecl: yyvstack[yysp]};
    break;

case 23:
    /*! Production::    declaration : IMPORT import_name import_path */
    this.$ = {imports: {name: yyvstack[yysp - 1], path: yyvstack[yysp]}};
    break;

case 24:
    /*! Production::    declaration : IMPORT import_name error */
    yyparser.yyError("You did not specify a legal file path for the '%import' initialization code statement, which must have the format: '%import qualifier_name file_path'.");
    break;

case 25:
    /*! Production::    declaration : IMPORT error import_path */
    yyparser.yyError("Each '%import'-ed initialization code section must be qualified by a name, e.g. 'required' before the import path itself: '%import qualifier_name file_path'.");
    break;

case 26:
    /*! Production::    declaration : INIT_CODE init_code_name action_ne */
    this.$ = {
        initCode: {
            qualifier: yyvstack[yysp - 1], 
            include: yyvstack[yysp],
    
        }
    };
    break;

case 27:
    /*! Production::    declaration : INIT_CODE error action_ne */
    yyparser.yyError("Each '%code' initialization code section must be qualified by a name, e.g. 'required' before the action code itself: '%code qualifier_name {action code}'.");
    break;

case 38:
    /*! Production::    options : OPTIONS option_list OPTIONS_END */
case 109:
    /*! Production::    action_ne : "{" action_body "}" */
    this.$ = yyvstack[yysp - 1];
    break;

case 39:
    /*! Production::    options : OPTIONS error OPTIONS_END */
case 47:
    /*! Production::    option : NAME "=" error */
case 75:
    /*! Production::    production : production_id error ";" */
case 78:
    /*! Production::    production_id : id optional_production_description error */
case 83:
    /*! Production::    handle_list : handle_list "|" error */
case 84:
    /*! Production::    handle_list : handle_list ":" error */
    // default action (generated by JISON):
    this.$ = yyvstack.slice(yysp - 2, yysp + 1);
    this._$ = yyparser.mergeLocationInfo(yysp - 2, yysp);
    break;

case 41:
    /*! Production::    option_list : option_list option */
case 58:
    /*! Production::    token_list : token_list symbol */
case 69:
    /*! Production::    id_list : id_list id */
    this.$ = yyvstack[yysp - 1]; this.$.push(yyvstack[yysp]);
    break;

case 42:
    /*! Production::    option_list : option */
case 59:
    /*! Production::    token_list : symbol */
case 70:
    /*! Production::    id_list : id */
case 82:
    /*! Production::    handle_list : handle_action */
    this.$ = [yyvstack[yysp]];
    break;

case 43:
    /*! Production::    option : NAME */
    this.$ = [yyvstack[yysp], true];
    break;

case 44:
    /*! Production::    option : NAME "=" OPTION_STRING_VALUE */
    this.$ = [yyvstack[yysp - 2], yyvstack[yysp]];
    break;

case 45:
    /*! Production::    option : NAME "=" OPTION_VALUE */
case 46:
    /*! Production::    option : NAME "=" NAME */
    this.$ = [yyvstack[yysp - 2], parseValue(yyvstack[yysp])];
    break;

case 53:
    /*! Production::    operator : associativity token_list */
    this.$ = [yyvstack[yysp - 1]]; this.$.push.apply(this.$, yyvstack[yysp]);
    break;

case 55:
    /*! Production::    associativity : LEFT */
    this.$ = 'left';
    break;

case 56:
    /*! Production::    associativity : RIGHT */
    this.$ = 'right';
    break;

case 57:
    /*! Production::    associativity : NONASSOC */
    this.$ = 'nonassoc';
    break;

case 60:
    /*! Production::    full_token_definitions : optional_token_type id_list */
    var rv = [];
    var lst = yyvstack[yysp];
    for (var i = 0, len = lst.length; i < len; i++) {
        var id = lst[i];
        var m = {id: id};
        if (yyvstack[yysp - 1]) {
            m.type = yyvstack[yysp - 1];
        }
        rv.push(m);
    }
    this.$ = rv;
    break;

case 61:
    /*! Production::    full_token_definitions : optional_token_type one_full_token */
    var m = yyvstack[yysp];
    if (yyvstack[yysp - 1]) {
        m.type = yyvstack[yysp - 1];
    }
    this.$ = [m];
    break;

case 62:
    /*! Production::    one_full_token : id token_value token_description */
    this.$ = {
        id: yyvstack[yysp - 2],
        value: yyvstack[yysp - 1],
        description: yyvstack[yysp]
    };
    break;

case 63:
    /*! Production::    one_full_token : id token_description */
    this.$ = {
        id: yyvstack[yysp - 1],
        description: yyvstack[yysp]
    };
    break;

case 64:
    /*! Production::    one_full_token : id token_value */
    this.$ = {
        id: yyvstack[yysp - 1],
        value: yyvstack[yysp]
    };
    break;

case 65:
    /*! Production::    optional_token_type : ε */
    this.$ = false;
    break;

case 71:
    /*! Production::    grammar : optional_action_header_block production_list */
    this.$ = yyvstack[yysp - 1];
    this.$.grammar = yyvstack[yysp];
    break;

case 72:
    /*! Production::    production_list : production_list production */
    this.$ = yyvstack[yysp - 1];
    if (yyvstack[yysp][0] in this.$) {
        this.$[yyvstack[yysp][0]] = this.$[yyvstack[yysp][0]].concat(yyvstack[yysp][1]);
    } else {
        this.$[yyvstack[yysp][0]] = yyvstack[yysp][1];
    }
    break;

case 73:
    /*! Production::    production_list : production */
    this.$ = {}; this.$[yyvstack[yysp][0]] = yyvstack[yysp][1];
    break;

case 74:
    /*! Production::    production : production_id handle_list ";" */
    this.$ = [yyvstack[yysp - 2], yyvstack[yysp - 1]];
    break;

case 77:
    /*! Production::    production_id : id optional_production_description ":" */
    this.$ = yyvstack[yysp - 2];
    break;

case 80:
    /*! Production::    optional_production_description : ε */
    // default action (generated by JISON):
    this.$ = undefined;
    this._$ = undefined;
    break;

case 81:
    /*! Production::    handle_list : handle_list "|" handle_action */
    this.$ = yyvstack[yysp - 2];
    this.$.push(yyvstack[yysp]);
    break;

case 85:
    /*! Production::    handle_action : handle prec action */
    this.$ = [(yyvstack[yysp - 2].length ? yyvstack[yysp - 2].join(' ') : '')];
    if (yyvstack[yysp]) {
        this.$.push(yyvstack[yysp]);
    }
    if (yyvstack[yysp - 1]) {
        if (yyvstack[yysp - 2].length === 0) {
            yyparser.yyError('You cannot specify a precedence override for an epsilon (a.k.a. empty) rule!');
        }
        this.$.push(yyvstack[yysp - 1]);
    }
    if (this.$.length === 1) {
        this.$ = this.$[0];
    }
    break;

case 86:
    /*! Production::    handle_action : EPSILON action */
    this.$ = [''];
    if (yyvstack[yysp]) {
        this.$.push(yyvstack[yysp]);
    }
    if (this.$.length === 1) {
        this.$ = this.$[0];
    }
    break;

case 88:
    /*! Production::    handle : handle suffixed_expression */
    this.$ = yyvstack[yysp - 1];
    this.$.push(yyvstack[yysp]);
    break;

case 89:
    /*! Production::    handle : ε */
    this.$ = [];
    break;

case 90:
    /*! Production::    handle_sublist : handle_sublist "|" handle */
    this.$ = yyvstack[yysp - 2];
    this.$.push(yyvstack[yysp].join(' '));
    break;

case 91:
    /*! Production::    handle_sublist : handle */
    this.$ = [yyvstack[yysp].join(' ')];
    break;

case 92:
    /*! Production::    suffixed_expression : expression suffix ALIAS */
    this.$ = yyvstack[yysp - 2] + yyvstack[yysp - 1] + "[" + yyvstack[yysp] + "]";
    break;

case 93:
    /*! Production::    suffixed_expression : expression suffix */
case 122:
    /*! Production::    action_comments_body : action_comments_body ACTION_BODY */
case 128:
    /*! Production::    module_code_chunk : module_code_chunk CODE */
    this.$ = yyvstack[yysp - 1] + yyvstack[yysp];
    break;

case 95:
    /*! Production::    expression : EOF_ID */
    this.$ = '$end';
    break;

case 96:
    /*! Production::    expression : STRING */
    // Re-encode the string *anyway* as it will
    // be made part of the rule rhs a.k.a. production (type: *string*) again and we want
    // to be able to handle all tokens, including *significant space*
    // encoded as literal tokens in a grammar such as this: `rule: A ' ' B`.
    this.$ = dquote(yyvstack[yysp]);
    break;

case 97:
    /*! Production::    expression : "(" handle_sublist ")" */
    this.$ = '(' + yyvstack[yysp - 1].join(' | ') + ')';
    break;

case 98:
    /*! Production::    expression : "(" handle_sublist error */
    var l = yyvstack[yysp - 1];
    var ab = l.slice(0, 10).join(' | ');
    yyparser.yyError("Seems you did not correctly bracket a grammar rule sublist in '( ... )' brackets. Offending handle sublist:\n" + ab);
    break;

case 99:
    /*! Production::    suffix : ε */
case 115:
    /*! Production::    action : ε */
case 116:
    /*! Production::    action_body : ε */
case 131:
    /*! Production::    optional_module_code_chunk : ε */
    this.$ = '';
    break;

case 103:
    /*! Production::    prec : PREC symbol */
    this.$ = { prec: yyvstack[yysp] };
    break;

case 105:
    /*! Production::    prec : ε */
    this.$ = null;
    break;

case 110:
    /*! Production::    action_ne : "{" action_body error */
    var l = yyvstack[yysp - 1].split('\n');
    var ab = l.slice(0, 10).join('\n');
    yyparser.yyError("Seems you did not correctly bracket a parser rule action block in curly braces: '{ ... }'. Offending action body:\n" + ab);
    break;

case 113:
    /*! Production::    action_ne : ARROW_ACTION */
    this.$ = '$$ = ' + yyvstack[yysp];
    break;

case 118:
    /*! Production::    action_body : action_body "{" action_body "}" action_comments_body */
    this.$ = yyvstack[yysp - 4] + yyvstack[yysp - 3] + yyvstack[yysp - 2] + yyvstack[yysp - 1] + yyvstack[yysp];
    break;

case 119:
    /*! Production::    action_body : action_body "{" action_body "}" */
    this.$ = yyvstack[yysp - 3] + yyvstack[yysp - 2] + yyvstack[yysp - 1] + yyvstack[yysp];
    break;

case 120:
    /*! Production::    action_body : action_body "{" action_body error */
    var l = yyvstack[yysp - 1].split('\n');
    var ab = l.slice(0, 10).join('\n');
    yyparser.yyError("Seems you did not correctly match curly braces '{ ... }' in a parser rule action block. Offending action body part:\n" + ab);
    break;

case 124:
    /*! Production::    extra_parser_module_code : optional_module_code_chunk include_macro_code extra_parser_module_code */
    this.$ = yyvstack[yysp - 2] + yyvstack[yysp - 1] + yyvstack[yysp];
    break;

case 125:
    /*! Production::    include_macro_code : INCLUDE PATH */
    var fs = require('fs');
    var fileContent = fs.readFileSync(yyvstack[yysp], { encoding: 'utf-8' });
    // And no, we don't support nested '%include':
    this.$ = '\n// Included by Jison: ' + yyvstack[yysp] + ':\n\n' + fileContent + '\n\n// End Of Include by Jison: ' + yyvstack[yysp] + '\n\n';
    break;

case 126:
    /*! Production::    include_macro_code : INCLUDE error */
    yyparser.yyError("%include MUST be followed by a valid file path");
    break;

case 129:
    /*! Production::    module_code_chunk : error */
    // default action (generated by JISON):
    this.$ = yyvstack[yysp];
    this._$ = yylstack[yysp];
    break;

case 132:
                // error recovery reduction action (action generated by jison, 
                // using the user-specified `%code error_recovery_reduction` %{...%}
                // code chunk below.

                
                break;
            
}
},
table: bt({
  len: u([
  19,
  1,
  24,
  5,
  18,
  17,
  3,
  17,
  17,
  5,
  s,
  [17, 7],
  4,
  5,
  6,
  2,
  s,
  [6, 4, -1],
  3,
  3,
  4,
  8,
  1,
  17,
  17,
  25,
  c,
  [18, 3],
  1,
  4,
  20,
  3,
  3,
  6,
  6,
  s,
  [4, 3],
  21,
  17,
  19,
  24,
  24,
  23,
  23,
  21,
  s,
  [17, 3],
  3,
  18,
  2,
  4,
  1,
  1,
  7,
  7,
  c,
  [40, 3],
  17,
  4,
  19,
  17,
  22,
  s,
  [17, 6],
  6,
  s,
  [20, 3],
  17,
  19,
  17,
  2,
  17,
  4,
  2,
  s,
  [1, 3],
  s,
  [3, 4],
  4,
  3,
  5,
  3,
  15,
  11,
  2,
  2,
  18,
  19,
  17,
  c,
  [104, 3],
  4,
  4,
  s,
  [2, 4],
  7,
  3,
  4,
  16,
  1,
  4,
  10,
  14,
  5,
  19,
  s,
  [18, 3],
  9,
  s,
  [3, 3],
  14,
  14,
  17,
  20,
  20,
  6,
  4,
  c,
  [49, 5],
  7,
  7,
  s,
  [15, 4],
  3,
  9,
  3,
  14,
  18,
  18,
  8,
  5,
  3,
  9,
  4
]),
  symbol: u([
  2,
  s,
  [14, 9, 1],
  26,
  s,
  [30, 5, 1],
  43,
  46,
  49,
  1,
  c,
  [20, 17],
  50,
  54,
  s,
  [57, 4, 1],
  88,
  15,
  23,
  43,
  48,
  68,
  c,
  [30, 18],
  c,
  [17, 18],
  23,
  82,
  c,
  [37, 36],
  35,
  62,
  64,
  c,
  [39, 35],
  c,
  [17, 85],
  23,
  25,
  52,
  2,
  23,
  24,
  25,
  51,
  c,
  [9, 3],
  61,
  81,
  82,
  2,
  44,
  c,
  [8, 7],
  23,
  25,
  c,
  [5, 3],
  24,
  55,
  56,
  c,
  [9, 3],
  c,
  [3, 6],
  c,
  [237, 3],
  47,
  c,
  [246, 3],
  69,
  70,
  71,
  82,
  88,
  c,
  [249, 36],
  4,
  5,
  6,
  12,
  s,
  [14, 10, 1],
  25,
  c,
  [23, 6],
  36,
  41,
  c,
  [147, 35],
  23,
  63,
  67,
  82,
  23,
  c,
  [114, 3],
  53,
  c,
  [26, 10],
  c,
  [64, 8],
  43,
  53,
  c,
  [141, 6],
  12,
  15,
  41,
  43,
  83,
  88,
  c,
  [6, 10],
  c,
  [4, 8],
  c,
  [50, 19],
  c,
  [199, 3],
  c,
  [114, 26],
  c,
  [38, 9],
  c,
  [175, 22],
  c,
  [81, 3],
  c,
  [24, 23],
  1,
  c,
  [25, 4],
  c,
  [24, 10],
  c,
  [70, 7],
  45,
  c,
  [23, 23],
  c,
  [151, 48],
  c,
  [17, 24],
  24,
  27,
  56,
  c,
  [20, 11],
  27,
  c,
  [21, 8],
  2,
  3,
  24,
  27,
  s,
  [1, 3],
  2,
  43,
  45,
  87,
  89,
  90,
  c,
  [412, 3],
  23,
  c,
  [420, 3],
  c,
  [427, 3],
  c,
  [3, 3],
  c,
  [13, 4],
  c,
  [147, 4],
  7,
  12,
  15,
  23,
  25,
  37,
  39,
  40,
  41,
  43,
  73,
  74,
  75,
  2,
  5,
  25,
  72,
  c,
  [146, 11],
  c,
  [92, 7],
  c,
  [295, 36],
  36,
  43,
  65,
  66,
  c,
  [663, 103],
  12,
  13,
  42,
  85,
  86,
  c,
  [334, 13],
  c,
  [426, 11],
  c,
  [20, 37],
  c,
  [502, 36],
  c,
  [353, 18],
  c,
  [55, 18],
  24,
  28,
  29,
  c,
  [351, 5],
  1,
  43,
  88,
  1,
  c,
  [482, 3],
  c,
  [3, 6],
  c,
  [344, 3],
  c,
  [116, 3],
  c,
  [495, 3],
  c,
  [8, 5],
  c,
  [354, 8],
  c,
  [353, 4],
  77,
  78,
  80,
  c,
  [565, 5],
  c,
  [668, 4],
  84,
  88,
  2,
  5,
  2,
  5,
  c,
  [364, 18],
  c,
  [18, 10],
  c,
  [138, 8],
  c,
  [343, 28],
  c,
  [174, 25],
  c,
  [293, 3],
  c,
  [296, 4],
  c,
  [4, 4],
  24,
  27,
  24,
  27,
  c,
  [4, 4],
  c,
  [517, 8],
  c,
  [163, 6],
  c,
  [507, 14],
  c,
  [506, 3],
  c,
  [184, 7],
  c,
  [157, 8],
  s,
  [4, 5, 1],
  c,
  [185, 8],
  c,
  [1011, 6],
  s,
  [4, 9, 1],
  c,
  [22, 3],
  s,
  [38, 4, 1],
  43,
  79,
  c,
  [19, 18],
  c,
  [18, 37],
  c,
  [16, 3],
  c,
  [88, 3],
  75,
  76,
  c,
  [287, 6],
  c,
  [3, 3],
  c,
  [141, 14],
  c,
  [14, 15],
  c,
  [486, 57],
  c,
  [552, 6],
  c,
  [6, 3],
  1,
  c,
  [105, 9],
  c,
  [3, 6],
  c,
  [228, 4],
  c,
  [7, 7],
  c,
  [232, 10],
  c,
  [173, 11],
  c,
  [15, 40],
  6,
  8,
  c,
  [203, 7],
  77,
  78,
  c,
  [368, 4],
  c,
  [307, 14],
  c,
  [265, 43],
  c,
  [164, 4],
  c,
  [169, 4],
  c,
  [78, 12],
  42
]),
  type: u([
  s,
  [2, 17],
  0,
  0,
  1,
  c,
  [20, 19],
  s,
  [0, 5],
  c,
  [10, 5],
  s,
  [2, 37],
  c,
  [38, 39],
  c,
  [39, 38],
  s,
  [2, 85],
  c,
  [123, 5],
  c,
  [210, 6],
  c,
  [134, 6],
  c,
  [224, 10],
  c,
  [151, 14],
  c,
  [36, 7],
  c,
  [172, 97],
  c,
  [98, 7],
  c,
  [103, 20],
  c,
  [20, 11],
  c,
  [37, 7],
  c,
  [141, 32],
  c,
  [346, 124],
  c,
  [151, 82],
  c,
  [54, 31],
  c,
  [314, 8],
  c,
  [94, 26],
  c,
  [476, 7],
  c,
  [680, 164],
  c,
  [442, 145],
  c,
  [144, 37],
  c,
  [380, 11],
  c,
  [810, 43],
  c,
  [235, 76],
  c,
  [119, 24],
  c,
  [973, 15],
  c,
  [38, 19],
  c,
  [57, 20],
  c,
  [154, 62],
  c,
  [452, 100],
  c,
  [552, 103],
  c,
  [103, 62],
  c,
  [1234, 16],
  c,
  [78, 6]
]),
  state: u([
  1,
  2,
  5,
  14,
  12,
  13,
  8,
  19,
  11,
  28,
  27,
  30,
  33,
  35,
  37,
  41,
  46,
  48,
  49,
  53,
  48,
  49,
  55,
  49,
  57,
  59,
  61,
  64,
  67,
  68,
  69,
  66,
  71,
  70,
  72,
  73,
  77,
  78,
  81,
  83,
  81,
  84,
  49,
  84,
  49,
  86,
  92,
  94,
  93,
  97,
  68,
  69,
  98,
  100,
  101,
  103,
  105,
  106,
  107,
  110,
  111,
  117,
  124,
  126,
  123,
  133,
  131,
  81,
  136,
  141,
  94,
  93,
  142,
  101,
  133,
  145,
  81,
  146,
  49,
  148,
  153,
  152,
  154,
  111,
  124,
  126,
  161,
  162,
  124,
  126
]),
  mode: u([
  s,
  [2, 17],
  s,
  [1, 17],
  c,
  [20, 4],
  s,
  [2, 34],
  c,
  [40, 5],
  c,
  [36, 32],
  c,
  [73, 36],
  s,
  [2, 85],
  s,
  [1, 20],
  c,
  [30, 15],
  c,
  [129, 95],
  c,
  [101, 4],
  c,
  [302, 25],
  c,
  [147, 18],
  c,
  [347, 48],
  c,
  [338, 115],
  c,
  [60, 71],
  c,
  [12, 9],
  c,
  [22, 4],
  c,
  [4, 3],
  c,
  [549, 6],
  c,
  [300, 12],
  c,
  [9, 15],
  c,
  [27, 20],
  c,
  [378, 29],
  c,
  [43, 41],
  c,
  [492, 73],
  c,
  [416, 133],
  c,
  [358, 8],
  c,
  [343, 4],
  c,
  [24, 13],
  c,
  [339, 14],
  c,
  [41, 6],
  c,
  [372, 5],
  c,
  [776, 35],
  c,
  [220, 60],
  c,
  [1100, 20],
  c,
  [1043, 10],
  c,
  [487, 14],
  c,
  [22, 9],
  c,
  [146, 17],
  c,
  [216, 10],
  c,
  [792, 149],
  c,
  [309, 62],
  c,
  [210, 50],
  c,
  [446, 7],
  c,
  [444, 36],
  c,
  [123, 36],
  c,
  [1192, 8],
  1
]),
  goto: u([
  s,
  [10, 17],
  4,
  3,
  10,
  6,
  7,
  9,
  s,
  [15, 4, 1],
  23,
  21,
  22,
  24,
  25,
  26,
  20,
  s,
  [6, 3],
  29,
  s,
  [11, 17],
  s,
  [9, 17],
  31,
  32,
  s,
  [13, 17],
  s,
  [14, 17],
  34,
  65,
  36,
  s,
  [16, 17],
  s,
  [17, 17],
  s,
  [18, 17],
  s,
  [19, 17],
  s,
  [20, 17],
  s,
  [21, 17],
  s,
  [22, 17],
  38,
  39,
  40,
  s,
  [42, 4, 1],
  47,
  32,
  50,
  52,
  51,
  54,
  32,
  50,
  56,
  32,
  50,
  58,
  60,
  s,
  [55, 3],
  s,
  [56, 3],
  s,
  [57, 3],
  4,
  62,
  63,
  65,
  32,
  20,
  3,
  s,
  [12, 17],
  s,
  [28, 17],
  s,
  [108, 25],
  s,
  [15, 17],
  s,
  [29, 17],
  32,
  66,
  74,
  75,
  76,
  s,
  [30, 10],
  c,
  [12, 9],
  s,
  [34, 3],
  s,
  [35, 3],
  79,
  80,
  82,
  20,
  c,
  [4, 4],
  s,
  [31, 4],
  s,
  [32, 4],
  s,
  [33, 4],
  s,
  [53, 10],
  32,
  50,
  s,
  [53, 7],
  s,
  [54, 17],
  s,
  [59, 19],
  s,
  [106, 24],
  s,
  [107, 24],
  s,
  [125, 23],
  s,
  [126, 23],
  s,
  [49, 10],
  32,
  50,
  s,
  [49, 7],
  s,
  [50, 17],
  s,
  [51, 17],
  s,
  [52, 17],
  60,
  85,
  s,
  [40, 11],
  87,
  s,
  [40, 6],
  42,
  42,
  89,
  88,
  43,
  43,
  90,
  91,
  131,
  96,
  131,
  95,
  s,
  [71, 3],
  32,
  s,
  [7, 3],
  s,
  [8, 3],
  s,
  [73, 4],
  99,
  s,
  [89, 8],
  102,
  s,
  [89, 4],
  80,
  80,
  104,
  s,
  [60, 10],
  32,
  s,
  [60, 7],
  s,
  [61, 17],
  s,
  [70, 11],
  109,
  s,
  [70, 6],
  108,
  70,
  s,
  [23, 17],
  s,
  [24, 17],
  s,
  [36, 17],
  s,
  [37, 17],
  s,
  [25, 17],
  s,
  [26, 17],
  s,
  [116, 3],
  112,
  s,
  [111, 20],
  s,
  [112, 20],
  s,
  [113, 20],
  s,
  [27, 17],
  s,
  [58, 19],
  s,
  [38, 17],
  41,
  41,
  s,
  [39, 17],
  116,
  115,
  113,
  114,
  48,
  48,
  1,
  2,
  5,
  123,
  20,
  130,
  130,
  118,
  s,
  [127, 3],
  s,
  [129, 3],
  s,
  [72, 4],
  119,
  121,
  120,
  76,
  76,
  122,
  76,
  76,
  s,
  [82, 3],
  s,
  [105, 3],
  130,
  105,
  105,
  127,
  129,
  128,
  125,
  105,
  105,
  132,
  s,
  [115, 3],
  c,
  [642, 4],
  135,
  134,
  79,
  79,
  s,
  [69, 18],
  s,
  [64, 10],
  109,
  s,
  [64, 7],
  s,
  [63, 17],
  s,
  [67, 18],
  s,
  [68, 17],
  138,
  139,
  137,
  s,
  [117, 3],
  140,
  s,
  [121, 4],
  44,
  44,
  45,
  45,
  46,
  46,
  47,
  47,
  c,
  [494, 4],
  s,
  [128, 3],
  s,
  [74, 4],
  143,
  c,
  [487, 13],
  144,
  s,
  [75, 4],
  c,
  [148, 7],
  s,
  [88, 14],
  147,
  32,
  50,
  s,
  [99, 6],
  149,
  150,
  151,
  s,
  [99, 9],
  s,
  [94, 18],
  s,
  [95, 18],
  s,
  [96, 18],
  s,
  [89, 7],
  s,
  [86, 3],
  s,
  [87, 3],
  s,
  [114, 3],
  s,
  [77, 14],
  s,
  [78, 14],
  s,
  [62, 17],
  s,
  [109, 20],
  s,
  [110, 20],
  c,
  [529, 4],
  s,
  [122, 4],
  124,
  s,
  [81, 3],
  s,
  [83, 3],
  s,
  [84, 3],
  s,
  [85, 3],
  s,
  [103, 7],
  s,
  [104, 7],
  s,
  [93, 10],
  155,
  s,
  [93, 4],
  s,
  [100, 15],
  s,
  [101, 15],
  s,
  [102, 15],
  157,
  158,
  156,
  91,
  91,
  130,
  91,
  c,
  [454, 3],
  160,
  139,
  159,
  s,
  [92, 14],
  s,
  [97, 18],
  s,
  [98, 18],
  s,
  [89, 7],
  s,
  [119, 3],
  112,
  s,
  [120, 3],
  90,
  90,
  130,
  90,
  c,
  [74, 3],
  s,
  [118, 3],
  140
])
}),
defaultActions: bda({
  idx: u([
  0,
  3,
  5,
  7,
  8,
  s,
  [10, 7, 1],
  24,
  25,
  26,
  s,
  [29, 6, 1],
  36,
  39,
  40,
  43,
  44,
  45,
  s,
  [47, 6, 1],
  54,
  55,
  56,
  59,
  65,
  66,
  67,
  71,
  s,
  [73, 6, 1],
  s,
  [80, 8, 1],
  s,
  [89, 4, 1],
  95,
  96,
  97,
  100,
  104,
  105,
  107,
  108,
  109,
  s,
  [112, 5, 1],
  118,
  119,
  122,
  124,
  s,
  [127, 12, 1],
  s,
  [140, 8, 1],
  149,
  150,
  151,
  s,
  [155, 4, 1],
  160
]),
  goto: u([
  10,
  6,
  9,
  13,
  14,
  s,
  [16, 7, 1],
  55,
  56,
  57,
  3,
  12,
  28,
  108,
  15,
  29,
  66,
  34,
  35,
  31,
  32,
  33,
  54,
  59,
  106,
  107,
  125,
  126,
  50,
  51,
  52,
  42,
  7,
  8,
  73,
  61,
  23,
  24,
  36,
  37,
  25,
  26,
  111,
  112,
  113,
  27,
  58,
  38,
  41,
  39,
  48,
  1,
  2,
  5,
  127,
  129,
  72,
  82,
  79,
  69,
  63,
  67,
  68,
  121,
  s,
  [44, 4, 1],
  128,
  74,
  75,
  88,
  94,
  95,
  96,
  89,
  86,
  87,
  114,
  77,
  78,
  62,
  109,
  110,
  122,
  124,
  81,
  83,
  84,
  85,
  103,
  104,
  100,
  101,
  102,
  92,
  97,
  98,
  89,
  120
])
}),
parseError: function parseError(str, hash, ExceptionClass) {
    if (hash.recoverable && typeof this.trace === 'function') {
        this.trace(str);
        hash.destroy();             // destroy... well, *almost*!
    } else {
        if (!ExceptionClass) {
            ExceptionClass = this.JisonParserError;
        }
        throw new ExceptionClass(str, hash);
    }
},
parse: function parse(input) {
    var self = this,
        stack = new Array(128),         // token stack: stores token which leads to state at the same index (column storage)
        sstack = new Array(128),        // state stack: stores states (column storage)

        vstack = new Array(128),        // semantic value stack
        lstack = new Array(128),        // location stack
        table = this.table,
        sp = 0;                         // 'stack pointer': index into the stacks

    var recovering = 0;                 // (only used when the grammar contains error recovery rules)
    var TERROR = this.TERROR,
        EOF = this.EOF,
        ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, table.length /* ensures that anyone using this new state will fail dramatically! */];

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState_yy = {
        parseError: null,
        quoteName: null,
        lexer: null,
        parser: null,
        pre_parse: null,
        post_parse: null,
        pre_lex: null,
        post_lex: null
    };

    function shallow_copy(dst, src) {
        for (var k in src) {
            if (Object.prototype.hasOwnProperty.call(src, k)) {
                dst[k] = src[k];
            }
        }
    }
    function shallow_copy_noclobber(dst, src) {
        for (var k in src) {
            if (dst[k] === undefined && Object.prototype.hasOwnProperty.call(src, k)) {
                dst[k] = src[k];
            }
        }
    }

    // copy state
    shallow_copy(sharedState_yy, this.yy);

    sharedState_yy.lexer = lexer;
    sharedState_yy.parser = this;



















    // *Always* setup `yyError`, `YYRECOVERING`, `yyErrOk` and `yyClearIn` functions as it is paramount
    // to have *their* closure match ours -- if we only set them up once,
    // any subsequent `parse()` runs will fail in very obscure ways when
    // these functions are invoked in the user action code block(s) as
    // their closure will still refer to the `parse()` instance which set
    // them up. Hence we MUST set them up at the start of every `parse()` run!
    if (this.yyError) {
        this.yyError = function yyError(str /*, ...args */) {



            var error_rule_depth = (this.options.parserErrorsAreRecoverable ? locateNearestErrorRecoveryRule(state) : -1);
            var expected = this.collect_expected_token_set(state);
            var hash = this.constructParseErrorInfo(str, null, expected, (error_rule_depth >= 0));


            // Add any extra args to the hash under the name `extra_error_attributes`:
            var args = Array.prototype.slice.call(arguments, 1);
            if (args.length) {
                hash.extra_error_attributes = args;
            }

            var r = this.parseError(str, hash, this.JisonParserError);
            return r;
        };
    }






    lexer.setInput(input, sharedState_yy);

    var yyloc = lexer.yylloc;
    lstack[sp] = yyloc;
    vstack[sp] = null;
    sstack[sp] = 0;
    stack[sp] = 0;
    ++sp;





    var ranges = lexer.options && lexer.options.ranges;

    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState_yy.parseError === 'function') {
        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) {
                ExceptionClass = this.JisonParserError;
            }
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState_yy.quoteName === 'function') {
        this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
        var rv;

        if (invoke_post_methods) {
            var hash;

            if (sharedState_yy.post_parse || this.post_parse) {
                // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
            }

            if (sharedState_yy.post_parse) {
                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }

            // cleanup:
            if (hash) {
                hash.destroy();
            }
        }

        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.

        // clean up the lingering lexer structures as well:
        if (lexer.cleanupAfterLex) {
            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
        }

        // prevent lingering circular references from causing memory leaks:
        if (sharedState_yy) {
            sharedState_yy.lexer = undefined;
            sharedState_yy.parser = undefined;
            if (lexer.yy === sharedState_yy) {
                lexer.yy = undefined;
            }
        }
        sharedState_yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;
        lstack.length = 0;
        vstack.length = 0;
        sp = 0;

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;
        }

        return resultValue;
    };

    // merge yylloc info into a new yylloc instance.
    //
    // `first_index` and `last_index` MAY be UNDEFINED/NULL or these are indexes into the `lstack[]` location stakc array.
    //
    // `first_yylloc` and `last_yylloc` MAY be UNDEFINED/NULL or explicit (custom or regular) `yylloc` instances, in which
    // case these override the corresponding first/last indexes.
    //
    // `dont_look_back` is an optional flag (default: FALSE), which instructs this merge operation NOT to search
    // through the parse location stack for a location, which would otherwise be used to construct the new (epsilon!)
    // yylloc info.
    //
    // Note: epsilon rule's yylloc situation is detected by passing both `first_index` and `first_yylloc` as UNDEFINED/NULL.
    this.mergeLocationInfo = function parser_mergeLocationInfo(first_index, last_index, first_yylloc, last_yylloc, dont_look_back) {
        var i1 = first_index | 0,
            i2 = last_index | 0;
        var l1 = first_yylloc,
            l2 = last_yylloc;
        var rv;

        // rules:
        // - first/last yylloc entries override first/last indexes

        if (!l1) {
            if (first_index != null) {
                for (var i = i1; i <= i2; i++) {
                    l1 = lstack[i];
                    if (l1) {
                        break;
                    }
                }
            }
        }

        if (!l2) {
            if (last_index != null) {
                for (var i = i2; i >= i1; i--) {
                    l2 = lstack[i];
                    if (l2) {
                        break;
                    }
                }
            }
        }

        // - detect if an epsilon rule is being processed and act accordingly:
        var start_with_epsilon = false;
        if (!l1 && first_index == null) {
            // epsilon rule span merger. With optional look-ahead in l2.
            start_with_epsilon = true;
            if (!dont_look_back) {
                for (var i = (i1 || sp) - 1; i >= 0; i--) {
                    l1 = lstack[i];
                    if (l1) {
                        break;
                    }
                }
            }
            if (!l1) {
                if (!l2) {
                    // when we still don't have any valid yylloc info, we're looking at an epsilon rule
                    // without look-ahead and no preceding terms and/or `dont_look_back` set:
                    // in that case we ca do nothing but return NULL/UNDEFINED:
                    return undefined;
                } else {
                    // shallow-copy L2: after all, we MAY be looking
                    // at unconventional yylloc info objects...
                    rv = {};
                    shallow_copy(rv, l2);
                    if (rv.range) {
                        // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                        rv.range = rv.range.slice(0);
                    }
                    return rv;
                }
            } else {
                // shallow-copy L1, then adjust first col/row 1 column past the end.
                rv = {};
                shallow_copy(rv, l1);
                rv.first_line = rv.last_line;
                rv.first_column = rv.last_column;
                if (rv.range) {
                    // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                    rv.range = rv.range.slice(0);
                    rv.range[0] = rv.range[1];
                }

                if (l2) {
                    // shallow-mixin L2, then adjust last col/row accordingly.
                    shallow_copy_noclobber(rv, l2);
                    rv.last_line = l2.last_line;
                    rv.last_column = l2.last_column;
                    if (rv.range && l2.range) {
                        rv.range[1] = l2.range[1];
                    }
                }
                return rv;
            }
        }

        if (!l1) {
            l1 = l2;
            l2 = null;
        }
        if (!l1) {
            return undefined;
        }

        rv = {};
        // shallow-copy L1|L2, before we try to adjust the yylloc values: after all, we MAY be looking
        // at unconventional yylloc info objects...
        shallow_copy(rv, l1);

        // first_line: ...,
        // first_column: ...,
        // last_line: ...,
        // last_column: ...,
        if (rv.range) {
            // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
            rv.range = rv.range.slice(0);
        }

        if (l2) {
            shallow_copy_noclobber(rv, l2);
            rv.last_line = l2.last_line;
            rv.last_column = l2.last_column;
            if (rv.range && l2.range) {
                rv.range[1] = l2.range[1];
            }
        }

        return rv;
    };

    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        var pei = {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,
            loc: lexer.yylloc,
            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,
            location_stack: lstack,
            stack_pointer: sp,
            yy: sharedState_yy,
            lexer: lexer,
            parser: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    };


    function lex() {
        var token = lexer.lex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token || EOF;
    }


    var symbol = 0;
    var preErrorSymbol = 0;
    var lastEofErrorStateDepth = 0;
    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined,
        yy: sharedState_yy
    };
    var p, len, this_production;
    var newState;
    var retval = false;


    // Return the rule stack depth where the nearest error rule can be found.
    // Return -1 when no error recovery rule was found.
    function locateNearestErrorRecoveryRule(state) {
        var stack_probe = sp - 1;
        var depth = 0;

        // try to recover from error
        for (;;) {
            // check for error recovery rule in this state

            var t = table[state][TERROR] || NO_ACTION;
            if (t[0]) {
                // We need to make sure we're not cycling forever:
                // once we hit EOF, even when we `yyerrok()` an error, we must
                // prevent the core from running forever,
                // e.g. when parent rules are still expecting certain input to
                // follow after this, for example when you handle an error inside a set
                // of braces which are matched by a parent rule in your grammar.
                //
                // Hence we require that every error handling/recovery attempt
                // *after we've hit EOF* has a diminishing state stack: this means
                // we will ultimately have unwound the state stack entirely and thus
                // terminate the parse in a controlled fashion even when we have
                // very complex error/recovery code interplay in the core + user
                // action code blocks:

                if (symbol === EOF) {
                    if (!lastEofErrorStateDepth) {
                        lastEofErrorStateDepth = sp - 1 - depth;
                    } else if (lastEofErrorStateDepth <= sp - 1 - depth) {

                        --stack_probe; // popStack(1): [symbol, action]
                        state = sstack[stack_probe];
                        ++depth;
                        continue;
                    }
                }
                return depth;
            }
            if (state === 0 /* $accept rule */ || stack_probe < 1) {

                return -1; // No suitable error recovery rule available.
            }
            --stack_probe; // popStack(1): [symbol, action]
            state = sstack[stack_probe];
            ++depth;
        }
    }


    try {
        this.__reentrant_call_depth++;

        if (this.pre_parse) {
            this.pre_parse.call(this, sharedState_yy);
        }
        if (sharedState_yy.pre_parse) {
            sharedState_yy.pre_parse.call(this, sharedState_yy);
        }

        newState = sstack[sp - 1];
        for (;;) {
            // retrieve state number from top of stack
            state = newState;               // sstack[sp - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = 2;
                newState = this.defaultActions[state];
            } else {
                // The single `==` condition below covers both these `===` comparisons in a single
                // operation:
                //
                //     if (symbol === null || typeof symbol === 'undefined') ...
                if (!symbol) {
                    symbol = lex();
                }
                // read action for current state and first input
                t = (table[state] && table[state][symbol]) || NO_ACTION;
                newState = t[1];
                action = t[0];




                // handle parse error
                if (!action) {
                    // first see if there's any chance at hitting an error recovery rule:
                    var error_rule_depth = locateNearestErrorRecoveryRule(state);
                    var errStr = null;
                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                    var expected = this.collect_expected_token_set(state);

                    if (!recovering) {
                        // Report error
                        if (typeof lexer.yylineno === 'number') {
                            errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                        } else {
                            errStr = 'Parse error: ';
                        }
                        if (lexer.showPosition) {
                            errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                        }
                        if (expected.length) {
                            errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                        } else {
                            errStr += 'Unexpected ' + errSymbolDescr;
                        }
                        p = this.constructParseErrorInfo(errStr, null, expected, (error_rule_depth >= 0));
                        r = this.parseError(p.errStr, p, this.JisonParserError);


                        // Protect against overly blunt userland `parseError` code which *sets* 
                        // the `recoverable` flag without properly checking first:
                        // we always terminate the parse when there's no recovery rule available anyhow!
                        if (!p.recoverable || error_rule_depth < 0) {
                            retval = r;
                            break;
                        } else {
                            // TODO: allow parseError callback to edit symbol and or state at the start of the error recovery process...
                        }
                    }



                    // just recovered from another error
                    if (recovering === ERROR_RECOVERY_TOKEN_DISCARD_COUNT && error_rule_depth >= 0) {
                        // SHIFT current lookahead and grab another
                        stack[sp] = symbol;
                        vstack[sp] = lexer.yytext;
                        lstack[sp] = lexer.yylloc;
                        sstack[sp] = newState; // push state
                        ++sp;
                        // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:



                        yyloc = lexer.yylloc;

                        symbol = lex();

                        if (error_rule_depth >= 0) {
                            // correct for the ERROR SHIFT above by adjusting the REDUCE amount:
                            error_rule_depth++;
                        }


                    }

                    // try to recover from error
                    if (error_rule_depth < 0) {
                        //assert(recovering);

                        // barf a fatal hairball when we're out of look-ahead symbols and none hit a match
                        // while we are still busy recovering from another error:
                        var po = this.__error_infos[this.__error_infos.length - 1];
                        if (!po) {
                            p = this.constructParseErrorInfo('Parsing halted while starting to recover from another error.', null, expected, false);
                        } else {
                            p = this.constructParseErrorInfo('Parsing halted while starting to recover from another error. Previous error which resulted in this fatal result: ' + po.errStr, null, expected, false);
                            p.extra_error_attributes = po;
                        }
                        retval = this.parseError(p.errStr, p, this.JisonParserError);
                        break;
                    }

                    preErrorSymbol = (symbol === TERROR ? 0 : symbol); // save the lookahead token
                    symbol = TERROR;            // insert generic error symbol as new lookahead

                    // REDUCE/COMBINE the pushed terms/tokens to a new ERROR token:
                    stack[sp] = preErrorSymbol;
                    vstack[sp] = lexer.yytext;
                    lstack[sp] = lexer.yylloc;
                    sstack[sp] = newState || NO_ACTION[1];
                    sp++;
                    error_rule_depth++;

                    yyval.$ = undefined;
                    yyval._$ = undefined;

                    len = error_rule_depth;

                    r = this.performAction.call(yyval, yyloc, NO_ACTION[1], sp - 1, len, vstack, lstack);

                    if (typeof r !== 'undefined') {
                        retval = r;
                        break;
                    }

                    // pop off stack
                    sp -= len;

                    stack[sp] = TERROR;
                    vstack[sp] = yyval.$;
                    lstack[sp] = yyval._$;
                    // goto new state = table[STATE][NONTERMINAL]

                    newState = sstack[sp - 1];

                    if (this.defaultActions[newState]) {
                        sstack[sp] = this.defaultActions[newState];
                    } else {
                        t = (table[newState] && table[newState][symbol]) || NO_ACTION;
                        sstack[sp] = t[1];
                    }

                    // allow N (default: 3) real symbols to be shifted before reporting a new error
                    recovering = ERROR_RECOVERY_TOKEN_DISCARD_COUNT;



                    continue;
                }


            }










            switch (action) {
            // catch misc. parse failures:
            default:
                // this shouldn't happen, unless resolve defaults are off
                if (action instanceof Array) {
                    p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
                    retval = this.parseError(p.errStr, p, this.JisonParserError);
                    break;
                }
                // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                // or a buggy LUT (LookUp Table):
                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                retval = this.parseError(p.errStr, p, this.JisonParserError);
                break;

            // shift:
            case 1:
                stack[sp] = symbol;
                vstack[sp] = lexer.yytext;
                lstack[sp] = lexer.yylloc;
                sstack[sp] = newState; // push state
                ++sp;
                symbol = 0;
                if (!preErrorSymbol) { // normal execution / no error
                    // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:



                    yyloc = lexer.yylloc;

                    if (recovering > 0) {
                        recovering--;

                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error, *unless* that drops us straight back into error mode:
                    symbol = preErrorSymbol;
                    preErrorSymbol = 0;

                    // read action for current state and first input
                    t = (table[newState] && table[newState][symbol]) || NO_ACTION;
                    if (!t[0] || symbol === TERROR) {
                        // forget about that symbol and move forward: this wasn't a 'forgot to insert' error type where
                        // (simple) stuff might have been missing before the token which caused the error we're
                        // recovering from now...
                        //
                        // Also check if the LookAhead symbol isn't the ERROR token we set as part of the error
                        // recovery, for then this we would we idling (cycling) on the error forever.
                        // Yes, this does not take into account the possibility that the *lexer* may have
                        // produced a *new* TERROR token all by itself, but that would be a very peculiar grammar!

                        symbol = 0;
                    }
                }

                continue;

            // reduce:
            case 2:
                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                len = this_production[1];



                yyval.$ = undefined;
                yyval._$ = undefined;

                r = this.performAction.call(yyval, yyloc, newState, sp - 1, len, vstack, lstack);

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                sp -= len;

                // don't overwrite the `symbol` variable: use a local var to speed things up:
                var ntsymbol = this_production[0];    // push nonterminal (reduce)
                stack[sp] = ntsymbol;
                vstack[sp] = yyval.$;
                lstack[sp] = yyval._$;
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[sstack[sp - 1]][ntsymbol];
                sstack[sp] = newState;
                ++sp;

                continue;

            // accept:
            case 3:
                retval = true;
                // Return the `$accept` rule's `$$` result, if available.
                //
                // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                // default, action):
                //
                //     $accept: <startSymbol> $end
                //                  %{ $$ = $1; @$ = @1; %}
                //
                // which, combined with the parse kernel's `$accept` state behaviour coded below,
                // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                //
                // In code:
                //
                //                  %{
                //                      @$ = @1;            // if location tracking support is included
                //                      if (typeof $1 !== 'undefined')
                //                          return $1;
                //                      else
                //                          return true;           // the default parse result if the rule actions don't produce anything
                //                  %}
                sp--;
                if (typeof vstack[sp] !== 'undefined') {
                    retval = vstack[sp];
                }
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } catch (ex) {
        // report exceptions through the parseError callback too, but keep the exception intact
        // if it is a known parser or lexer error which has been thrown by parseError() already:
        if (ex instanceof this.JisonParserError) {
            throw ex;
        }
        else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {
            throw ex;
        }
        else {
            p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
            retval = this.parseError(p.errStr, p, this.JisonParserError);
        }
    } finally {
        retval = this.cleanupAfterParse(retval, true, true);
        this.__reentrant_call_depth--;
    }

    return retval;
},
yyError: 1
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;

var fs = require('fs');
var transform = require('./ebnf-transform').transform;
var ebnf = false;
var XRegExp = require('xregexp');       // for helping out the `%options xregexp` in the lexer


// properly quote and escape the given input string
function dquote(s) {
    var sq = (s.indexOf('\'') >= 0);
    var dq = (s.indexOf('"') >= 0);
    if (sq && dq) {
        s = s.replace(/"/g, '\\"');
        dq = false;
    }
    if (dq) {
        s = '\'' + s + '\'';
    }
    else {
        s = '"' + s + '"';
    }
    return s;
}

// transform ebnf to bnf if necessary
function extend(json, grammar) {
    json.bnf = ebnf ? transform(grammar.grammar) : grammar.grammar;
    if (grammar.actionInclude) {
        json.actionInclude = grammar.actionInclude;
    }
    return json;
}

// convert string value to number or boolean value, when possible
// (and when this is more or less obviously the intent)
// otherwise produce the string itself as value.
function parseValue(v) {
    if (v === 'false') {
        return false;
    }
    if (v === 'true') {
        return true;
    }
    // http://stackoverflow.com/questions/175739/is-there-a-built-in-way-in-javascript-to-check-if-a-string-is-a-valid-number
    // Note that the `v` check ensures that we do not convert `undefined`, `null` and `''` (empty string!)
    if (v && !isNaN(v)) {
        var rv = +v;
        if (isFinite(rv)) {
            return rv;
        }
    }
    return v;
}

parser.warn = function p_warn() {
    console.warn.apply(console, arguments);
};

parser.log = function p_log() {
    console.log.apply(console, arguments);
};
var lexer = function() {
  function JisonLexerError(msg, hash) {
    Object.defineProperty(this, 'name', {
      enumerable: false,
      writable: false,
      value: 'JisonLexerError'
    });

    if (msg == null)
      msg = '???';

    Object.defineProperty(this, 'message', {
      enumerable: false,
      writable: true,
      value: msg
    });

    this.hash = hash;
    var stacktrace;

    if (hash && hash.exception instanceof Error) {
      var ex2 = hash.exception;
      this.message = ex2.message || msg;
      stacktrace = ex2.stack;
    }

    if (!stacktrace) {
      if (Error.hasOwnProperty('captureStackTrace')) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        stacktrace = new Error(msg).stack;
      }
    }

    if (stacktrace) {
      Object.defineProperty(this, 'stack', {
        enumerable: false,
        writable: false,
        value: stacktrace
      });
    }
  }

  if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
  } else {
    JisonLexerError.prototype = Object.create(Error.prototype);
  }

  JisonLexerError.prototype.constructor = JisonLexerError;
  JisonLexerError.prototype.name = 'JisonLexerError';

  var lexer = {
    EOF: 1,
    ERROR: 2,
    __currentRuleSet__: null,
    __error_infos: [],
    __decompressed: false,
    done: false,
    _backtrack: false,
    _input: '',
    _more: false,
    _signaled_error_token: false,
    conditionStack: [],
    match: '',
    matched: '',
    matches: false,
    yytext: '',
    offset: 0,
    yyleng: 0,
    yylineno: 0,
    yylloc: null,

    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable) {
      var pei = {
        errStr: msg,
        recoverable: !!recoverable,
        text: this.match,
        token: null,
        line: this.yylineno,
        loc: this.yylloc,
        yy: this.yy,
        lexer: this,

        destroy: function destructLexErrorInfo() {
          var rec = !!this.recoverable;

          for (var key in this) {
            if (this.hasOwnProperty(key) && typeof key === 'object') {
              this[key] = undefined;
            }
          }

          this.recoverable = rec;
        }
      };

      this.__error_infos.push(pei);
      return pei;
    },

    parseError: function lexer_parseError(str, hash, ExceptionClass) {
      if (!ExceptionClass) {
        ExceptionClass = this.JisonLexerError;
      }

      if (this.yy) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
          return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        } else if (typeof this.yy.parseError === 'function') {
          return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        }
      }

      throw new ExceptionClass(str, hash);
    },

    yyerror: function yyError(str) {
      var lineno_msg = '';

      if (this.options.trackPosition) {
        lineno_msg = ' on line ' + (this.yylineno + 1);
      }

      var p = this.constructLexErrorInfo(
        'Lexical error' + lineno_msg + ': ' + str,
        this.options.lexerErrorsAreRecoverable
      );

      var args = Array.prototype.slice.call(arguments, 1);

      if (args.length) {
        p.extra_error_attributes = args;
      }

      return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
    },

    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
      var rv;
      this.setInput('', {});

      if (!do_not_nuke_errorinfos) {
        for (var i = this.__error_infos.length - 1; i >= 0; i--) {
          var el = this.__error_infos[i];

          if (el && typeof el.destroy === 'function') {
            el.destroy();
          }
        }

        this.__error_infos.length = 0;
      }

      return this;
    },

    clear: function lexer_clear() {
      this.yytext = '';
      this.yyleng = 0;
      this.match = '';
      this.matches = false;
      this._more = false;
      this._backtrack = false;
      var col = (this.yylloc ? this.yylloc.last_column : 0);

      this.yylloc = {
        first_line: this.yylineno + 1,
        first_column: col,
        last_line: this.yylineno + 1,
        last_column: col,
        range: [this.offset, this.offset]
      };
    },

    setInput: function lexer_setInput(input, yy) {
      this.yy = yy || this.yy || {};

      if (!this.__decompressed) {
        var rules = this.rules;

        for (var i = 0, len = rules.length; i < len; i++) {
          var rule_re = rules[i];

          if (typeof rule_re === 'number') {
            rules[i] = rules[rule_re];
          }
        }

        var conditions = this.conditions;

        for (var k in conditions) {
          var spec = conditions[k];
          var rule_ids = spec.rules;
          var len = rule_ids.length;
          var rule_regexes = new Array(len + 1);
          var rule_new_ids = new Array(len + 1);

          for (var i = 0; i < len; i++) {
            var idx = rule_ids[i];
            var rule_re = rules[idx];
            rule_regexes[i + 1] = rule_re;
            rule_new_ids[i + 1] = idx;
          }

          spec.rules = rule_new_ids;
          spec.__rule_regexes = rule_regexes;
          spec.__rule_count = len;
        }

        this.__decompressed = true;
      }

      this._input = input || '';
      this.clear();
      this._signaled_error_token = false;
      this.done = false;
      this.yylineno = 0;
      this.matched = '';
      this.conditionStack = ['INITIAL'];
      this.__currentRuleSet__ = null;

      this.yylloc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      this.offset = 0;
      return this;
    },

    pushInput: function lexer_pushInput(input, label, options) {
      options = options || {};
      this._input = input || '';
      this.clear();
      this.done = false;
      this.yylineno = 0;
      this.matched = '';

      this.yylloc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      this.offset = 0;
      return this;
    },

    input: function lexer_input() {
      if (!this._input) {
        return null;
      }

      var ch = this._input[0];
      this.yytext += ch;
      this.yyleng++;
      this.offset++;
      this.match += ch;
      this.matched += ch;
      var slice_len = 1;
      var lines = false;

      if (ch === '\n') {
        lines = true;
      } else if (ch === '\r') {
        lines = true;
        var ch2 = this._input[1];

        if (ch2 === '\n') {
          slice_len++;
          ch += ch2;
          this.yytext += ch2;
          this.yyleng++;
          this.offset++;
          this.match += ch2;
          this.matched += ch2;
          this.yylloc.range[1]++;
        }
      }

      if (lines) {
        this.yylineno++;
        this.yylloc.last_line++;
        this.yylloc.last_column = 0;
      } else {
        this.yylloc.last_column++;
      }

      this.yylloc.range[1]++;
      this._input = this._input.slice(slice_len);
      return ch;
    },

    unput: function lexer_unput(ch) {
      var len = ch.length;
      var lines = ch.split(/(?:\r\n?|\n)/g);
      this._input = ch + this._input;
      this.yytext = this.yytext.substr(0, this.yytext.length - len);
      this.yyleng = this.yytext.length;
      this.offset -= len;
      this.match = this.match.substr(0, this.match.length - len);
      this.matched = this.matched.substr(0, this.matched.length - len);

      if (lines.length > 1) {
        this.yylineno -= lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;
        var pre = this.match;
        var pre_lines = pre.split(/(?:\r\n?|\n)/g);

        if (pre_lines.length === 1) {
          pre = this.matched;
          pre_lines = pre.split(/(?:\r\n?|\n)/g);
        }

        this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;
      } else {
        this.yylloc.last_column -= len;
      }

      this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
      this.done = false;
      return this;
    },

    more: function lexer_more() {
      this._more = true;
      return this;
    },

    reject: function lexer_reject() {
      if (this.options.backtrack_lexer) {
        this._backtrack = true;
      } else {
        var lineno_msg = '';

        if (this.options.trackPosition) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var pos_str = this.showPosition();

        if (pos_str && pos_str[0] !== '\n') {
          pos_str = '\n' + pos_str;
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).' + pos_str,
          false
        );

        this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
      }

      return this;
    },

    less: function lexer_less(n) {
      return this.unput(this.match.slice(n));
    },

    pastInput: function lexer_pastInput(maxSize, maxLines) {
      var past = this.matched.substring(0, this.matched.length - this.match.length);

      if (maxSize < 0)
        maxSize = past.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = past.length;
      else if (!maxLines)
        maxLines = 1;

      past = past.substr(-maxSize * 2 - 2);
      var a = past.replace(/\r\n|\r/g, '\n').split('\n');
      a = a.slice(-maxLines);
      past = a.join('\n');

      if (past.length > maxSize) {
        past = '...' + past.substr(-maxSize);
      }

      return past;
    },

    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
      var next = this.match;

      if (maxSize < 0)
        maxSize = next.length + this._input.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = maxSize;
      else if (!maxLines)
        maxLines = 1;

      if (next.length < maxSize * 2 + 2) {
        next += this._input.substring(0, maxSize * 2 + 2);
      }

      var a = next.replace(/\r\n|\r/g, '\n').split('\n');
      a = a.slice(0, maxLines);
      next = a.join('\n');

      if (next.length > maxSize) {
        next = next.substring(0, maxSize) + '...';
      }

      return next;
    },

    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
      var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
      var c = new Array(pre.length + 1).join('-');
      return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
    },

    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
      var l1 = yylloc.first_line;
      var l2 = yylloc.last_line;
      var c1 = yylloc.first_column;
      var c2 = yylloc.last_column;
      var dl = l2 - l1;
      var dc = c2 - c1;
      var rv;

      if (dl === 0) {
        rv = 'line ' + l1 + ', ';

        if (dc <= 1) {
          rv += 'column ' + c1;
        } else {
          rv += 'columns ' + c1 + ' .. ' + c2;
        }
      } else {
        rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';
      }

      if (yylloc.range && display_range_too) {
        var r1 = yylloc.range[0];
        var r2 = yylloc.range[1] - 1;

        if (r2 <= r1) {
          rv += ' {String Offset: ' + r1 + '}';
        } else {
          rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
        }
      }

      return rv;
    },

    test_match: function lexer_test_match(match, indexed_rule) {
      var token, lines, backup, match_str, match_str_len;

      if (this.options.backtrack_lexer) {
        backup = {
          yylineno: this.yylineno,

          yylloc: {
            first_line: this.yylloc.first_line,
            last_line: this.yylloc.last_line,
            first_column: this.yylloc.first_column,
            last_column: this.yylloc.last_column,
            range: this.yylloc.range.slice(0)
          },

          yytext: this.yytext,
          match: this.match,
          matches: this.matches,
          matched: this.matched,
          yyleng: this.yyleng,
          offset: this.offset,
          _more: this._more,
          _input: this._input,
          yy: this.yy,
          conditionStack: this.conditionStack.slice(0),
          done: this.done
        };
      }

      match_str = match[0];
      match_str_len = match_str.length;
      lines = match_str.split(/(?:\r\n?|\n)/g);

      if (lines.length > 1) {
        this.yylineno += lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = lines[lines.length - 1].length;
      } else {
        this.yylloc.last_column += match_str_len;
      }

      this.yytext += match_str;
      this.match += match_str;
      this.matches = match;
      this.yyleng = this.yytext.length;
      this.yylloc.range[1] += match_str_len;
      this.offset += match_str_len;
      this._more = false;
      this._backtrack = false;
      this._input = this._input.slice(match_str_len);
      this.matched += match_str;

      token = this.performAction.call(
        this,
        this.yy,
        this,
        indexed_rule,
        this.conditionStack[this.conditionStack.length - 1]
      );

      if (this.done && this._input) {
        this.done = false;
      }

      if (token) {
        return token;
      } else if (this._backtrack) {
        for (var k in backup) {
          this[k] = backup[k];
        }

        this.__currentRuleSet__ = null;
        return false;
      } else if (this._signaled_error_token) {
        token = this._signaled_error_token;
        this._signaled_error_token = false;
        return token;
      }

      return false;
    },

    next: function lexer_next() {
      if (this.done) {
        this.clear();
        return this.EOF;
      }

      if (!this._input) {
        this.done = true;
      }

      var token, match, tempMatch, index;

      if (!this._more) {
        this.clear();
      }

      var spec = this.__currentRuleSet__;

      if (!spec) {
        spec = this.__currentRuleSet__ = this._currentRules();

        if (!spec || !spec.rules) {
          var lineno_msg = '';

          if (this.options.trackPosition) {
            lineno_msg = ' on line ' + (this.yylineno + 1);
          }

          var pos_str = this.showPosition();

          if (pos_str && pos_str[0] !== '\n') {
            pos_str = '\n' + pos_str;
          }

          var p = this.constructLexErrorInfo(
            'Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!' + pos_str,
            false
          );

          return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
        }
      }

      var rule_ids = spec.rules;
      var regexes = spec.__rule_regexes;
      var len = spec.__rule_count;

      for (var i = 1; i <= len; i++) {
        tempMatch = this._input.match(regexes[i]);

        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
          match = tempMatch;
          index = i;

          if (this.options.backtrack_lexer) {
            token = this.test_match(tempMatch, rule_ids[i]);

            if (token !== false) {
              return token;
            } else if (this._backtrack) {
              match = undefined;
              continue;
            } else {
              return false;
            }
          } else if (!this.options.flex) {
            break;
          }
        }
      }

      if (match) {
        token = this.test_match(match, rule_ids[index]);

        if (token !== false) {
          return token;
        }

        return false;
      }

      if (!this._input) {
        this.done = true;
        this.clear();
        return this.EOF;
      } else {
        var lineno_msg = '';

        if (this.options.trackPosition) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var pos_str = this.showPosition();

        if (pos_str && pos_str[0] !== '\n') {
          pos_str = '\n' + pos_str;
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': Unrecognized text.' + pos_str,
          this.options.lexerErrorsAreRecoverable
        );

        token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;

        if (token === this.ERROR) {
          if (!this.match.length) {
            this.input();
          }
        }

        return token;
      }
    },

    lex: function lexer_lex() {
      var r;

      if (typeof this.options.pre_lex === 'function') {
        r = this.options.pre_lex.call(this);
      }

      while (!r) {
        r = this.next();
      }

      if (typeof this.options.post_lex === 'function') {
        r = this.options.post_lex.call(this, r) || r;
      }

      return r;
    },

    begin: function lexer_begin(condition) {
      return this.pushState(condition);
    },

    pushState: function lexer_pushState(condition) {
      this.conditionStack.push(condition);
      this.__currentRuleSet__ = null;
      return this;
    },

    popState: function lexer_popState() {
      var n = this.conditionStack.length - 1;

      if (n > 0) {
        this.__currentRuleSet__ = null;
        return this.conditionStack.pop();
      } else {
        return this.conditionStack[0];
      }
    },

    topState: function lexer_topState(n) {
      n = this.conditionStack.length - 1 - Math.abs(n || 0);

      if (n >= 0) {
        return this.conditionStack[n];
      } else {
        return 'INITIAL';
      }
    },

    _currentRules: function lexer__currentRules() {
      if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
        return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
      } else {
        return this.conditions['INITIAL'];
      }
    },

    stateStackSize: function lexer_stateStackSize() {
      return this.conditionStack.length;
    },

    options: {
      xregexp: true,
      ranges: true,
      trackPosition: true,
      easy_keyword_rules: true
    },

    JisonLexerError: JisonLexerError,

    performAction: function lexer__performAction(yy, yy_, yyrulenumber, YY_START) {
      var YYSTATE = YY_START;

      switch (yyrulenumber) {
      case 0:
        this.popState();
        break;
      case 1:
        this.popState();
        break;
      case 2:
        this.popState();
        break;
      case 3:
        this.pushState('code');
        return 14;
        break;
      case 17:
        yy_.yytext = this.matches[1];
        return 28;
        break;
      case 18:
        yy_.yytext = this.matches[1];
        return 28;
        break;
      case 19:
        break;
      case 20:
        break;
      case 22:
        break;
      case 23:
        this.popState();
        return 27;
        break;
      case 24:
        break;
      case 25:
        break;
      case 26:
        break;
      case 27:
        yy_.yytext = this.matches[1];
        return 38;
        break;
      case 32:
        yy_.yytext = this.matches[1];
        return 25;
        break;
      case 33:
        yy_.yytext = this.matches[1];
        return 25;
        break;
      case 38:
        this.pushState((ebnf ? 'ebnf' : 'bnf'));
        return 14;
        break;
      case 39:
        if (!yy.options) {
          yy.options = {};
        }

        ebnf = yy.options.ebnf = true;
        break;
      case 40:
        if (!yy.options) {
          yy.options = {};
        }

        yy.options.debug = true;
        return 19;
        break;
      case 47:
        this.pushState('token');
        return 18;
        break;
      case 49:
        this.pushState('options');
        return 26;
        break;
      case 50:
        yy_.yytext = this.matches[1];
        return 17;
        break;
      case 53:
        this.pushState('path');
        return 43;
        break;
      case 54:
        var l0 = Math.max(0, yy_.yylloc.last_column - yy_.yylloc.first_column);
        var l2 = 19;
        var l1 = Math.min(79 - 4 - l0 - l2, yy_.yylloc.first_column, 0);

        this.warn(
          'EBNF: ignoring unsupported parser option:',
          dquote(yy_.yytext),
          'while lexing in',
          this.topState(),
          'state:\n' + indent(this.showPosition(l1, l2), 4)
        );

        yy_.yytext = [this.matches[1], this.matches[2].trim()];
        return 20;
        break;
      case 55:
        yy_.yytext = this.matches[1];
        return 35;
        break;
      case 56:
        yy_.yytext = yy_.yytext.substr(2, yy_.yyleng - 4);
        return 15;
        break;
      case 57:
        yy_.yytext = yy_.yytext.substr(2, yy_.yyleng - 4);
        return 15;
        break;
      case 58:
        yy.depth = 0;
        this.pushState('action');
        return 12;
        break;
      case 59:
        yy_.yytext = yy_.yytext.substr(2, yy_.yyleng - 2).trim();
        return 41;
        break;
      case 60:
        yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 1).trim();
        return 41;
        break;
      case 61:
        yy_.yytext = parseInt(yy_.yytext, 16);
        return 36;
        break;
      case 62:
        yy_.yytext = parseInt(yy_.yytext, 10);
        return 36;
        break;
      case 65:
        return 42;
        break;
      case 70:
        yy.depth++;
        return 12;
        break;
      case 71:
        if (yy.depth === 0) {
          this.popState();
        } else {
          yy.depth--;
        }

        return 13;
        break;
      case 73:
        return 45;
        break;
      case 74:
        this.popState();
        this.unput(yy_.yytext);
        break;
      case 75:
        yy_.yytext = this.matches[1];
        this.popState();
        return 44;
        break;
      case 76:
        yy_.yytext = this.matches[1];
        this.popState();
        return 44;
        break;
      case 77:
        break;
      case 78:
        this.popState();
        return 44;
        break;
      case 79:
        var l0 = Math.max(0, yy_.yylloc.last_column - yy_.yylloc.first_column);
        var l2 = 39;
        var l1 = Math.min(79 - 4 - l0 - l2, yy_.yylloc.first_column, 0);
        var pos_str = this.showPosition(l1, l2);

        if (pos_str && pos_str[0] !== '\n') {
          pos_str = '\n\n       Offending input:\n' + indent(pos_str, 4);
        }

        yy_.yyerror(
          'unsupported parser input: ' + dquote(yy_.yytext) + ' @ ' + this.describeYYLLOC(yy_.yylloc) + ' while lexing in ' + dquote(this.topState()) + ' state.' + pos_str
        );

        break;
      default:
        return this.simpleCaseActionClusters[yyrulenumber];
      }
    },

    simpleCaseActionClusters: {
      4: 37,
      5: 37,
      6: 37,
      7: 37,
      8: 37,
      9: 37,
      10: 7,
      11: 8,
      12: 9,
      13: 10,
      14: 11,
      15: 24,
      16: 3,
      21: 29,
      28: 23,
      29: 24,
      30: 39,
      31: 39,
      34: 'TOKEN_WORD',
      35: 5,
      36: 4,
      37: 6,
      41: 31,
      42: 40,
      43: 16,
      44: 32,
      45: 33,
      46: 34,
      48: 30,
      51: 22,
      52: 21,
      63: 42,
      64: 42,
      66: 42,
      67: 42,
      68: 42,
      69: 42,
      72: 45,
      80: 1
    },

    rules: [
      /^(?:(\r\n|\n|\r))/,
      /^(?:%%)/,
      /^(?:;)/,
      /^(?:%%)/,
      /^(?:%empty\b)/,
      /^(?:%epsilon\b)/,
      /^(?:\u0190)/,
      /^(?:\u025B)/,
      /^(?:\u03B5)/,
      /^(?:\u03F5)/,
      /^(?:\()/,
      /^(?:\))/,
      /^(?:\*)/,
      /^(?:\?)/,
      /^(?:\+)/,
      new XRegExp(
        '^(?:([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}\\-_]*(?:[\\p{Alphabetic}\\p{Number}_]))?))',
        ''
      ),
      /^(?:=)/,
      /^(?:"((?:\\"|\\[^"]|[^"\\])*)")/,
      /^(?:'((?:\\'|\\[^']|[^'\\])*)')/,
      /^(?:\/\/[^\r\n]*)/,
      new XRegExp('^(?:\\/\\*[^]*?\\*\\/)', ''),
      /^(?:\S+)/,
      /^(?:(\r\n|\n|\r)([^\S\n\r])+(?=\S))/,
      /^(?:(\r\n|\n|\r))/,
      /^(?:([^\S\n\r])+)/,
      /^(?:([^\S\n\r])+)/,
      /^(?:(\r\n|\n|\r)+)/,
      new XRegExp('^(?:\\[([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*)\\])', ''),
      new XRegExp('^(?:([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*))', ''),
      new XRegExp(
        '^(?:([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}\\-_]*(?:[\\p{Alphabetic}\\p{Number}_]))?))',
        ''
      ),
      /^(?:\$end\b)/,
      /^(?:\$eof\b)/,
      /^(?:"((?:\\"|\\[^"]|[^"\\])*)")/,
      /^(?:'((?:\\'|\\[^']|[^'\\])*)')/,
      /^(?:\S+)/,
      /^(?::)/,
      /^(?:;)/,
      /^(?:\|)/,
      /^(?:%%)/,
      /^(?:%ebnf\b)/,
      /^(?:%debug\b)/,
      /^(?:%parser-type\b)/,
      /^(?:%prec\b)/,
      /^(?:%start\b)/,
      /^(?:%left\b)/,
      /^(?:%right\b)/,
      /^(?:%nonassoc\b)/,
      /^(?:%token\b)/,
      /^(?:%parse-param\b)/,
      /^(?:%options\b)/,
      new XRegExp(
        '^(?:%lex((?:[^\\S\\n\\r])*(?:(?:\\r\\n|\\n|\\r)[^]*?)?(?:\\r\\n|\\n|\\r)(?:[^\\S\\n\\r])*)\\/lex\\b)',
        ''
      ),
      /^(?:%code\b)/,
      /^(?:%import\b)/,
      /^(?:%include\b)/,
      new XRegExp(
        '^(?:%([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}\\-_]*(?:[\\p{Alphabetic}\\p{Number}_]))?)([^\\n\\r]*))',
        ''
      ),
      new XRegExp('^(?:<([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*)>)', ''),
      new XRegExp('^(?:\\{\\{[^]*?\\}\\})', ''),
      new XRegExp('^(?:%\\{[^]*?%\\})', ''),
      /^(?:\{)/,
      /^(?:->.*)/,
      /^(?:→.*)/,
      /^(?:(0[Xx][\dA-Fa-f]+))/,
      /^(?:([1-9]\d*)(?![\dA-FXa-fx]))/,
      new XRegExp('^(?:\\/\\*[^]*?\\*\\/)', ''),
      /^(?:\/\/[^\r\n]*)/,
      /^(?:\/[^ \/]*?['"{}][^ ]*?\/)/,
      /^(?:"((?:\\"|\\[^"]|[^"\\])*)")/,
      /^(?:'((?:\\'|\\[^']|[^'\\])*)')/,
      /^(?:[\/"'][^{}\/"']+)/,
      /^(?:[^{}\/"']+)/,
      /^(?:\{)/,
      /^(?:\})/,
      /^(?:[^\r\n]*(\r|\n)+)/,
      /^(?:[^\r\n]+)/,
      /^(?:(\r\n|\n|\r))/,
      /^(?:"((?:\\"|\\[^"]|[^"\\])*)")/,
      /^(?:'((?:\\'|\\[^']|[^'\\])*)')/,
      /^(?:([^\S\n\r])+)/,
      /^(?:\S+)/,
      /^(?:.)/,
      /^(?:$)/
    ],

    conditions: {
      'bnf': {
        rules: [
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          19,
          20,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          79,
          80
        ],

        inclusive: true
      },

      'ebnf': {
        rules: [
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          19,
          20,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          79,
          80
        ],

        inclusive: true
      },

      'token': {
        rules: [
          0,
          1,
          2,
          19,
          20,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          79,
          80
        ],

        inclusive: true
      },

      'action': {
        rules: [63, 64, 65, 66, 67, 68, 69, 70, 71, 79, 80],
        inclusive: false
      },

      'code': {
        rules: [53, 72, 73, 79, 80],
        inclusive: false
      },

      'path': {
        rules: [19, 20, 74, 75, 76, 77, 78, 79, 80],
        inclusive: false
      },

      'options': {
        rules: [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 79, 80],
        inclusive: false
      },

      'INITIAL': {
        rules: [
          19,
          20,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          79,
          80
        ],

        inclusive: true
      }
    }
  };

  function indent(s, i) {
    var a = s.split('\n');
    var pf = new Array(i + 1).join(' ');
    return pf + a.join('\n' + pf);
  }

  function dquote(s) {
    var sq = s.indexOf('\'') >= 0;
    var dq = s.indexOf('"') >= 0;

    if (sq && dq) {
      s = s.replace(/"/g, '\\"');
      dq = false;
    }

    if (dq) {
      s = '\'' + s + '\'';
    } else {
      s = '"' + s + '"';
    }

    return s;
  }

  function unquote(s) {
    var sq = s.indexOf('\'') >= 0;
    var dq = s.indexOf('"') >= 0;

    if (sq && dq) {
      s = s.replace(/"/g, '\\"');
      dq = false;
    }

    if (dq) {
      s = '\'' + s + '\'';
    } else {
      s = '"' + s + '"';
    }

    return s;
  }

  lexer.warn = function l_warn() {
    if (this.yy && this.yy.parser && typeof this.yy.parser.warn === 'function') {
      return this.yy.parser.warn.apply(this, arguments);
    } else {
      console.warn.apply(console, arguments);
    }
  };

  lexer.log = function l_log() {
    if (this.yy && this.yy.parser && typeof this.yy.parser.log === 'function') {
      return this.yy.parser.log.apply(this, arguments);
    } else {
      console.log.apply(console, arguments);
    }
  };

  return lexer;
}();
parser.lexer = lexer;

function Parser() {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

return new Parser();
})();




if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = parser;
  exports.Parser = parser.Parser;
  exports.parse = function () {
    return parser.parse.apply(parser, arguments);
  };
  
}
