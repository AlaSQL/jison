[
  {
    id: 19,
    token: '"%%"',
    yytext: '%%',
    yylloc: {
      first_line: 1,
      first_column: 0,
      last_line: 1,
      last_column: 2,
      range: [
        0,
        2,
      ],
    },
  },
  {
    id: 50,
    token: '"STRING_LIT"',
    yytext: '"["',
    yylloc: {
      first_line: 2,
      first_column: 0,
      last_line: 2,
      last_column: 3,
      range: [
        3,
        6,
      ],
    },
  },
  {
    id: 46,
    token: '"REGEX_SET_START"',
    yytext: '[',
    yylloc: {
      first_line: 2,
      first_column: 3,
      last_line: 2,
      last_column: 4,
      range: [
        6,
        7,
      ],
    },
  },
  {
    id: 48,
    token: '"REGEX_SET"',
    yytext: '^\\]',
    yylloc: {
      first_line: 2,
      first_column: 4,
      last_line: 2,
      last_column: 7,
      range: [
        7,
        10,
      ],
    },
  },
  {
    id: 47,
    token: '"REGEX_SET_END"',
    yytext: ']',
    yylloc: {
      first_line: 2,
      first_column: 7,
      last_line: 2,
      last_column: 8,
      range: [
        10,
        11,
      ],
    },
  },
  {
    id: 50,
    token: '"STRING_LIT"',
    yytext: '"]"',
    yylloc: {
      first_line: 2,
      first_column: 8,
      last_line: 2,
      last_column: 11,
      range: [
        11,
        14,
      ],
    },
  },
  {
    id: 26,
    token: '"ACTION_START"',
    yytext: '%{',
    yylloc: {
      first_line: 2,
      first_column: 12,
      last_line: 2,
      last_column: 12,
      range: [
        15,
        15,
      ],
    },
  },
  {
    id: 36,
    token: '"ACTION_BODY"',
    yytext: `
return true;
`,
    yylloc: {
      first_line: 2,
      first_column: 12,
      last_line: 4,
      last_column: 2,
      range: [
        15,
        33,
      ],
    },
  },
  {
    id: 36,
    token: '"ACTION_BODY"',
    yytext: '\n ',
    yylloc: {
      first_line: 4,
      first_column: 2,
      last_line: 5,
      last_column: 1,
      range: [
        33,
        35,
      ],
    },
  },
  {
    fail: 1,
    err: {
      message: `Lexical error on line 5: 
too many closing curly braces in lexer rule action block.

Note: the action code chunk may be too complex for jison to parse
easily; we suggest you wrap the action code chunk in '%{...%}'
to help jison grok more or less complex action code chunks.

  Erroneous area:
2: "["[^\\]]"]" %{
3: return true;
4: %}
5:  }
^...^
6: 
7: `,
      name: 'JisonLexerError',
      hash: {
        errStr: `Lexical error on line 5: 
too many closing curly braces in lexer rule action block.

Note: the action code chunk may be too complex for jison to parse
easily; we suggest you wrap the action code chunk in '%{...%}'
to help jison grok more or less complex action code chunks.

  Erroneous area:
2: "["[^\\]]"]" %{
3: return true;
4: %}
5:  }
^...^
6: 
7: `,
        recoverable: false,
        text: '}',
        token: null,
        line: 4,
        loc: {
          first_line: 5,
          first_column: 1,
          last_line: 5,
          last_column: 2,
          range: [
            35,
            36,
          ],
        },
        yy: {
          depth: 0,
          include_command_allowed: false,
        },
        lexer: {
          EOF: 1,
          ERROR: 2,
          __currentRuleSet__: {
            rules: [
              null,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              92,
              93,
              94,
              98,
              99,
              100,
              103,
              104,
            ],
            inclusive: false,
            __rule_regexes: [
              null,
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
            ],
            __rule_count: 25,
            __action_chunk_rule_idx: 1,
            __cached_action_chunk_rule: {
              '%{': {},
            },
          },
          __error_infos: [
            {
              errStr: `Lexical error on line 2: 
Incorrectly terminated action code block. We're expecting the
'%}' end marker to go with the given start marker.
Regrettably, it does not exist in the remainder of the input.

  Erroneous area:
1: %%
2: "["[^\\]]"]" %{
^..............^^
3: return true;
4: }}`,
              recoverable: false,
              text: '%{',
              token: null,
              line: 1,
              loc: {
                first_line: 2,
                first_column: 12,
                last_line: 2,
                last_column: 14,
                range: [
                  15,
                  17,
                ],
              },
              yy: {
                depth: 0,
                include_command_allowed: false,
              },
              lexer: {
                circularReference: true,
                index: 4,
                parentDepth: 2,
                key: 'lexer',
                keyStack: [
                  '',
                  '9',
                  'err',
                  'hash',
                  'lexer',
                  '__error_infos',
                  '0',
                ],
              },
            },
            {
              errStr: `Lexical error on line 2: 
Incorrectly terminated action code block. We're expecting the
'%}' end marker to go with the given start marker.
Regrettably, it does not exist in the remainder of the input.

  Erroneous area:
1: %%
2: "["[^\\]]"]" %{
^..............^^
3: return true;
4: %}}`,
              recoverable: false,
              text: '%{',
              token: null,
              line: 1,
              loc: {
                first_line: 2,
                first_column: 12,
                last_line: 2,
                last_column: 14,
                range: [
                  15,
                  17,
                ],
              },
              yy: {
                depth: 0,
                include_command_allowed: false,
              },
              lexer: {
                circularReference: true,
                index: 4,
                parentDepth: 2,
                key: 'lexer',
                keyStack: [
                  '',
                  '9',
                  'err',
                  'hash',
                  'lexer',
                  '__error_infos',
                  '1',
                ],
              },
            },
            {
              errStr: `Lexical error on line 4: 
too many closing curly braces in lexer rule action block.

Note: the action code chunk may be too complex for jison to parse
easily; we suggest you wrap the action code chunk in '%{...%}'
to help jison grok more or less complex action code chunks.

  Erroneous area:
1: %%
2: "["[^\\]]"]" %{
3: return true;
4: %} }
^.....^
5: 
6: `,
              recoverable: false,
              text: '}',
              token: null,
              line: 3,
              loc: {
                first_line: 4,
                first_column: 3,
                last_line: 4,
                last_column: 4,
                range: [
                  34,
                  35,
                ],
              },
              yy: {
                depth: 0,
                include_command_allowed: false,
              },
              lexer: {
                circularReference: true,
                index: 4,
                parentDepth: 2,
                key: 'lexer',
                keyStack: [
                  '',
                  '9',
                  'err',
                  'hash',
                  'lexer',
                  '__error_infos',
                  '2',
                ],
              },
            },
            {
              circularReference: true,
              index: 3,
              parentDepth: 2,
              key: '3',
              keyStack: [
                '',
                '9',
                'err',
                'hash',
                'lexer',
                '__error_infos',
              ],
            },
          ],
          __decompressed: true,
          done: false,
          _backtrack: false,
          _input: `

`,
          _more: false,
          _signaled_error_token: false,
          conditionStack: [
            'INITIAL',
            'rules',
            'action',
          ],
          match: '}',
          matched: `%%
"["[^\\]]"]" %{
return true;
%}
 }`,
          matches: [
            '}',
          ],
          yytext: '}',
          offset: 36,
          base_position: 0,
          yyleng: 1,
          yylineno: 4,
          yylloc: {
            first_line: 5,
            first_column: 1,
            last_line: 5,
            last_column: 2,
            range: [
              35,
              36,
            ],
          },
          CRLF_Re: {},
          options: {
            xregexp: true,
            ranges: true,
            trackPosition: true,
            easy_keyword_rules: true,
          },
          simpleCaseActionClusters: {
            '16': 36,
            '26': 18,
            '27': 53,
            '28': 53,
            '29': 53,
            '33': 17,
            '34': 11,
            '36': 54,
            '45': 50,
            '46': 50,
            '47': 50,
            '50': 7,
            '51': 41,
            '52': 41,
            '53': 41,
            '54': 41,
            '55': 41,
            '56': 8,
            '57': 9,
            '58': 10,
            '59': 11,
            '60': 12,
            '61': 15,
            '62': 17,
            '63': 16,
            '65': 6,
            '68': 43,
            '71': 16,
            '72': 14,
            '81': 49,
            '82': 45,
            '83': 45,
            '84': 4,
            '85': 5,
            '86': 48,
            '87': 48,
            '90': 55,
            '104': 1,
          },
          rules: [
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
              xregexp: {
                captureNames: null,
                source: '^(?:<([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*)>)',
                flags: '',
                isNative: false,
              },
            },
            {},
            {},
            {},
            {},
            {
              xregexp: {
                captureNames: null,
                source: '^(?:([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*))',
                flags: '',
                isNative: false,
              },
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
              xregexp: {
                captureNames: null,
                source: '^(?:%([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}\\-_]*(?:[\\p{Alphabetic}\\p{Number}_]))?)([^\\n\\r]*))',
                flags: '',
                isNative: false,
              },
            },
            {},
            {},
            {
              xregexp: {
                captureNames: null,
                source: '^(?:\\{([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*)\\})',
                flags: '',
                isNative: false,
              },
            },
            {
              xregexp: {
                captureNames: null,
                source: '^(?:\\{([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*)\\})',
                flags: '',
                isNative: false,
              },
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
          ],
          conditions: {
            rules: {
              rules: [
                null,
                0,
                1,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                84,
                85,
                98,
                99,
                100,
                101,
                103,
                104,
              ],
              inclusive: true,
              __rule_regexes: [
                null,
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {
                  xregexp: {
                    captureNames: null,
                    source: '^(?:%([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}\\-_]*(?:[\\p{Alphabetic}\\p{Number}_]))?)([^\\n\\r]*))',
                    flags: '',
                    isNative: false,
                  },
                },
                {},
                {},
                {
                  xregexp: {
                    captureNames: null,
                    source: '^(?:\\{([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*)\\})',
                    flags: '',
                    isNative: false,
                  },
                },
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
              ],
              __rule_count: 57,
            },
            macro: {
              rules: [
                null,
                0,
                1,
                20,
                21,
                22,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                80,
                81,
                82,
                84,
                85,
                98,
                99,
                100,
                101,
                103,
                104,
              ],
              inclusive: true,
              __rule_regexes: [
                null,
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {
                  xregexp: {
                    captureNames: null,
                    source: '^(?:\\{([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*)\\})',
                    flags: '',
                    isNative: false,
                  },
                },
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
              ],
              __rule_count: 53,
            },
            code: {
              rules: [
                null,
                19,
                78,
                79,
                89,
                90,
                91,
                98,
                99,
                100,
                103,
                104,
              ],
              inclusive: false,
              __rule_regexes: [
                null,
                {},
                {},
                {
                  xregexp: {
                    captureNames: null,
                    source: '^(?:%([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}\\-_]*(?:[\\p{Alphabetic}\\p{Number}_]))?)([^\\n\\r]*))',
                    flags: '',
                    isNative: false,
                  },
                },
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
              ],
              __rule_count: 11,
            },
            options: {
              rules: [
                null,
                0,
                1,
                19,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                83,
                95,
                96,
                97,
                98,
                99,
                100,
                102,
                103,
                104,
              ],
              inclusive: false,
              __rule_regexes: [
                null,
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {
                  xregexp: {
                    captureNames: null,
                    source: '^(?:<([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*)>)',
                    flags: '',
                    isNative: false,
                  },
                },
                {},
                {},
                {},
                {},
                {
                  xregexp: {
                    captureNames: null,
                    source: '^(?:\\{([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*)\\})',
                    flags: '',
                    isNative: false,
                  },
                },
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
              ],
              __rule_count: 27,
            },
            action: {
              rules: [
                null,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                92,
                93,
                94,
                98,
                99,
                100,
                103,
                104,
              ],
              inclusive: false,
              __rule_regexes: [
                null,
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
              ],
              __rule_count: 25,
              __action_chunk_rule_idx: 1,
              __cached_action_chunk_rule: {
                '%{': {},
              },
            },
            set: {
              rules: [
                null,
                83,
                86,
                87,
                88,
                98,
                99,
                100,
                103,
                104,
              ],
              inclusive: false,
              __rule_regexes: [
                null,
                {
                  xregexp: {
                    captureNames: null,
                    source: '^(?:\\{([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*)\\})',
                    flags: '',
                    isNative: false,
                  },
                },
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
              ],
              __rule_count: 9,
            },
            INITIAL: {
              rules: [
                null,
                0,
                1,
                19,
                20,
                21,
                22,
                40,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                84,
                85,
                98,
                99,
                100,
                103,
                104,
              ],
              inclusive: true,
              __rule_regexes: [
                null,
                {},
                {},
                {},
                {},
                {},
                {},
                {
                  xregexp: {
                    captureNames: null,
                    source: '^(?:([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*))',
                    flags: '',
                    isNative: false,
                  },
                },
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {
                  xregexp: {
                    captureNames: null,
                    source: '^(?:%([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}\\-_]*(?:[\\p{Alphabetic}\\p{Number}_]))?)([^\\n\\r]*))',
                    flags: '',
                    isNative: false,
                  },
                },
                {},
                {},
                {
                  xregexp: {
                    captureNames: null,
                    source: '^(?:\\{([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*)\\})',
                    flags: '',
                    isNative: false,
                  },
                },
                {},
                {},
                {},
                {},
                {},
                {},
                {},
              ],
              __rule_count: 54,
            },
          },
          yy: {
            depth: 0,
            include_command_allowed: false,
          },
          __original_input__: `%%
"["[^\\]]"]" %{
return true;
%}
 }

`,
        },
      },
    },
  },
]