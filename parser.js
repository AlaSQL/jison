/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$, ...),
                (where `...` denotes the (optional) additional arguments the user passed to `parser.parse(str, ...)`)
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),
        stateStackSize: function(),

        options: { ... },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (array describing the set of expected tokens; may be empty when we cannot easily produce such a set)
    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule available for this particular error)
  }
  
  You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
  These options are available:
  
  ### options which are global for all parser instances
  
  Parser.pre_parse: function(yy)
                              optional: you can specify a pre_parse() function in the chunk following the grammar, 
                              i.e. after the last `%%`.
  Parser.post_parse: function(yy, retval) { return retval; }
                              optional: you can specify a post_parse() function in the chunk following the grammar, 
                              i.e. after the last `%%`. When it does not return any value, the parser will return 
                              the original `retval`.
  
  ### options which can be set up per parser instance
  
  yy: {
      pre_parse:  function(yy)
                              optional: is invoked before the parse cycle starts (and before the first invocation 
                              of `lex()`) but immediately after the invocation of parser.pre_parse()).
      post_parse: function(yy, retval) { return retval; }
                              optional: is invoked when the parse terminates due to success ('accept') or failure 
                              (even when exceptions are thrown).  `retval` contains the return value to be produced
                              by `Parser.parse()`; this function can override the return value by returning another. 
                              When it does not return any value, the parser will return the original `retval`. 
                              This function is invoked immediately before `Parser.post_parse()`.
      parseError: function(str, hash)
                              optional: overrides the default `parseError` function.
  }
  
  parser.lexer.options: {
      ranges: boolean         optional: true ==> token location info will include a .range[] member.
      flex: boolean           optional: true ==> flex-like lexing behaviour where the rules are tested
                                                 exhaustively to find the longest match.
      backtrack_lexer: boolean
                              optional: true ==> lexer regexes are tested in order and for each matching
                                                 regex the action code is invoked; the lexer terminates
                                                 the scan when a token is returned by the action code.
      pre_lex:  function()
                              optional: is invoked before the lexer is invoked to produce another token.
                              `this` refers to the Lexer object.
      post_lex: function(token) { return token; }
                              optional: is invoked when the lexer has produced a token `token`;
                              this function can override the returned token value by returning another.
                              When it does not return any (truthy) value, the lexer will return the original `token`.
                              `this` refers to the Lexer object.
  }
*/
var bnf = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"spec":3,"declaration_list":4,"%%":5,"grammar":6,"optional_end_block":7,"EOF":8,"CODE":9,"optional_action_header_block":10,"ACTION":11,"declaration":12,"START":13,"id":14,"LEX_BLOCK":15,"operator":16,"parse_param":17,"PARSE_PARAM":18,"token_list":19,"associativity":20,"LEFT":21,"RIGHT":22,"NONASSOC":23,"symbol":24,"production_list":25,"production":26,":":27,"handle_list":28,";":29,"|":30,"handle_action":31,"handle":32,"prec":33,"action":34,"expression_suffix":35,"handle_sublist":36,"expression":37,"suffix":38,"ALIAS":39,"ID":40,"STRING":41,"(":42,")":43,"*":44,"?":45,"+":46,"PREC":47,"{":48,"action_body":49,"}":50,"ARROW_ACTION":51,"action_comments_body":52,"ACTION_BODY":53,"$accept":0,"$end":1},
terminals_: {2:"error",5:"%%",8:"EOF",9:"CODE",11:"ACTION",13:"START",15:"LEX_BLOCK",18:"PARSE_PARAM",21:"LEFT",22:"RIGHT",23:"NONASSOC",27:":",29:";",30:"|",39:"ALIAS",40:"ID",41:"STRING",42:"(",43:")",44:"*",45:"?",46:"+",47:"PREC",48:"{",50:"}",51:"ARROW_ACTION",53:"ACTION_BODY"},
productions_: [0,[3,5],[3,6],[7,0],[7,1],[10,0],[10,2],[4,2],[4,0],[12,2],[12,1],[12,1],[12,1],[12,1],[17,2],[16,2],[20,1],[20,1],[20,1],[19,2],[19,1],[6,2],[25,2],[25,1],[26,4],[28,3],[28,1],[31,3],[32,2],[32,0],[36,3],[36,1],[35,3],[35,2],[37,1],[37,1],[37,3],[38,0],[38,1],[38,1],[38,1],[33,2],[33,0],[24,1],[24,1],[14,1],[34,3],[34,1],[34,1],[34,0],[49,0],[49,1],[49,5],[49,4],[52,1],[52,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1 : 
/*! Production::     spec : declaration_list %% grammar optional_end_block EOF */
 this.$ = $$[$0-4]; return extend(this.$, $$[$0-2]); 
break;
case 2 : 
/*! Production::     spec : declaration_list %% grammar %% CODE EOF */
 this.$ = $$[$0-5]; yy.addDeclaration(this.$,{include: $$[$0-1]}); return extend(this.$, $$[$0-3]); 
break;
case 5 : 
/*! Production::     optional_action_header_block :  */
 this.$ = {}; 
break;
case 6 : 
/*! Production::     optional_action_header_block : optional_action_header_block ACTION */
 this.$ = $$[$0-1]; yy.addDeclaration(this.$,{actionInclude: $$[$0]}); 
break;
case 7 : 
/*! Production::     declaration_list : declaration_list declaration */
 this.$ = $$[$0-1]; yy.addDeclaration(this.$, $$[$0]); 
break;
case 8 : 
/*! Production::     declaration_list :  */
 this.$ = {}; 
break;
case 9 : 
/*! Production::     declaration : START id */
 this.$ = {start: $$[$0]}; 
break;
case 10 : 
/*! Production::     declaration : LEX_BLOCK */
 this.$ = {lex: $$[$0]}; 
break;
case 11 : 
/*! Production::     declaration : operator */
 this.$ = {operator: $$[$0]}; 
break;
case 12 : 
/*! Production::     declaration : ACTION */
 this.$ = {include: $$[$0]}; 
break;
case 13 : 
/*! Production::     declaration : parse_param */
 this.$ = {parseParam: $$[$0]}; 
break;
case 14 : 
/*! Production::     parse_param : PARSE_PARAM token_list */
 this.$ = $$[$0]; 
break;
case 15 : 
/*! Production::     operator : associativity token_list */
 this.$ = [$$[$0-1]]; this.$.push.apply(this.$, $$[$0]); 
break;
case 16 : 
/*! Production::     associativity : LEFT */
 this.$ = 'left'; 
break;
case 17 : 
/*! Production::     associativity : RIGHT */
 this.$ = 'right'; 
break;
case 18 : 
/*! Production::     associativity : NONASSOC */
 this.$ = 'nonassoc'; 
break;
case 19 : 
/*! Production::     token_list : token_list symbol */
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 20 : 
/*! Production::     token_list : symbol */
 this.$ = [$$[$0]]; 
break;
case 21 : 
/*! Production::     grammar : optional_action_header_block production_list */
 this.$ = $$[$0-1]; this.$.grammar = $$[$0]; 
break;
case 22 : 
/*! Production::     production_list : production_list production */
 
            this.$ = $$[$0-1];
            if ($$[$0][0] in this.$)
                this.$[$$[$0][0]] = this.$[$$[$0][0]].concat($$[$0][1]);
            else
                this.$[$$[$0][0]] = $$[$0][1];
         
break;
case 23 : 
/*! Production::     production_list : production */
 this.$ = {}; this.$[$$[$0][0]] = $$[$0][1]; 
break;
case 24 : 
/*! Production::     production : id : handle_list ; */
 this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 25 : 
/*! Production::     handle_list : handle_list | handle_action */
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 26 : 
/*! Production::     handle_list : handle_action */
 this.$ = [$$[$0]]; 
break;
case 27 : 
/*! Production::     handle_action : handle prec action */
 
            this.$ = [($$[$0-2].length ? $$[$0-2].join(' ') : '')];
            if($$[$0]) this.$.push($$[$0]);
            if($$[$0-1]) this.$.push($$[$0-1]);
            if (this.$.length === 1) this.$ = this.$[0];
         
break;
case 28 : 
/*! Production::     handle : handle expression_suffix */
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 29 : 
/*! Production::     handle :  */
 this.$ = []; 
break;
case 30 : 
/*! Production::     handle_sublist : handle_sublist | handle */
 this.$ = $$[$0-2]; this.$.push($$[$0].join(' ')); 
break;
case 31 : 
/*! Production::     handle_sublist : handle */
 this.$ = [$$[$0].join(' ')]; 
break;
case 32 : 
/*! Production::     expression_suffix : expression suffix ALIAS */
 this.$ = $$[$0-2] + $$[$0-1] + "[" + $$[$0] + "]";  
break;
case 33 : 
/*! Production::     expression_suffix : expression suffix */
 this.$ = $$[$0-1] + $$[$0];  
break;
case 34 : 
/*! Production::     expression : ID */
 this.$ = $$[$0];  
break;
case 35 : 
/*! Production::     expression : STRING */
 this.$ = ebnf ? "'" + $$[$0] + "'" : $$[$0];  
break;
case 36 : 
/*! Production::     expression : ( handle_sublist ) */
 this.$ = '(' + $$[$0-1].join(' | ') + ')';  
break;
case 37 : 
/*! Production::     suffix :  */
 this.$ = '' 
break;
case 41 : 
/*! Production::     prec : PREC symbol */
 this.$ = {prec: $$[$0]}; 
break;
case 42 : 
/*! Production::     prec :  */
 this.$ = null; 
break;
case 43 : 
/*! Production::     symbol : id */
 this.$ = $$[$0]; 
break;
case 44 : 
/*! Production::     symbol : STRING */
 this.$ = yytext; 
break;
case 45 : 
/*! Production::     id : ID */
 this.$ = yytext; 
break;
case 46 : 
/*! Production::     action : { action_body } */
 this.$ = $$[$0-1]; 
break;
case 47 : 
/*! Production::     action : ACTION */
 this.$ = $$[$0]; 
break;
case 48 : 
/*! Production::     action : ARROW_ACTION */
 this.$ = '$$ =' + $$[$0] + ';'; 
break;
case 49 : 
/*! Production::     action :  */
 this.$ = ''; 
break;
case 50 : 
/*! Production::     action_body :  */
 this.$ = ''; 
break;
case 51 : 
/*! Production::     action_body : action_comments_body */
 this.$ = $$[$0]; 
break;
case 52 : 
/*! Production::     action_body : action_body { action_body } action_comments_body */
 this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 53 : 
/*! Production::     action_body : action_body { action_body } */
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 54 : 
/*! Production::     action_comments_body : ACTION_BODY */
  this.$ = yytext;  
break;
case 55 : 
/*! Production::     action_comments_body : action_comments_body ACTION_BODY */
  this.$ = $$[$0-1] + $$[$0];  
break;
}
},
table: [{3:1,4:2,5:[2,8],11:[2,8],13:[2,8],15:[2,8],18:[2,8],21:[2,8],22:[2,8],23:[2,8]},{1:[3]},{5:[1,3],11:[1,8],12:4,13:[1,5],15:[1,6],16:7,17:9,18:[1,11],20:10,21:[1,12],22:[1,13],23:[1,14]},{6:15,10:16,11:[2,5],40:[2,5]},{5:[2,7],11:[2,7],13:[2,7],15:[2,7],18:[2,7],21:[2,7],22:[2,7],23:[2,7]},{14:17,40:[1,18]},{5:[2,10],11:[2,10],13:[2,10],15:[2,10],18:[2,10],21:[2,10],22:[2,10],23:[2,10]},{5:[2,11],11:[2,11],13:[2,11],15:[2,11],18:[2,11],21:[2,11],22:[2,11],23:[2,11]},{5:[2,12],11:[2,12],13:[2,12],15:[2,12],18:[2,12],21:[2,12],22:[2,12],23:[2,12]},{5:[2,13],11:[2,13],13:[2,13],15:[2,13],18:[2,13],21:[2,13],22:[2,13],23:[2,13]},{14:21,19:19,24:20,40:[1,18],41:[1,22]},{14:21,19:23,24:20,40:[1,18],41:[1,22]},{40:[2,16],41:[2,16]},{40:[2,17],41:[2,17]},{40:[2,18],41:[2,18]},{5:[1,25],7:24,8:[2,3]},{11:[1,27],14:29,25:26,26:28,40:[1,18]},{5:[2,9],11:[2,9],13:[2,9],15:[2,9],18:[2,9],21:[2,9],22:[2,9],23:[2,9]},{5:[2,45],11:[2,45],13:[2,45],15:[2,45],18:[2,45],21:[2,45],22:[2,45],23:[2,45],27:[2,45],29:[2,45],30:[2,45],40:[2,45],41:[2,45],48:[2,45],51:[2,45]},{5:[2,15],11:[2,15],13:[2,15],14:21,15:[2,15],18:[2,15],21:[2,15],22:[2,15],23:[2,15],24:30,40:[1,18],41:[1,22]},{5:[2,20],11:[2,20],13:[2,20],15:[2,20],18:[2,20],21:[2,20],22:[2,20],23:[2,20],40:[2,20],41:[2,20]},{5:[2,43],11:[2,43],13:[2,43],15:[2,43],18:[2,43],21:[2,43],22:[2,43],23:[2,43],29:[2,43],30:[2,43],40:[2,43],41:[2,43],48:[2,43],51:[2,43]},{5:[2,44],11:[2,44],13:[2,44],15:[2,44],18:[2,44],21:[2,44],22:[2,44],23:[2,44],29:[2,44],30:[2,44],40:[2,44],41:[2,44],48:[2,44],51:[2,44]},{5:[2,14],11:[2,14],13:[2,14],14:21,15:[2,14],18:[2,14],21:[2,14],22:[2,14],23:[2,14],24:30,40:[1,18],41:[1,22]},{8:[1,31]},{8:[2,4],9:[1,32]},{5:[2,21],8:[2,21],14:29,26:33,40:[1,18]},{11:[2,6],40:[2,6]},{5:[2,23],8:[2,23],40:[2,23]},{27:[1,34]},{5:[2,19],11:[2,19],13:[2,19],15:[2,19],18:[2,19],21:[2,19],22:[2,19],23:[2,19],40:[2,19],41:[2,19]},{1:[2,1]},{8:[1,35]},{5:[2,22],8:[2,22],40:[2,22]},{11:[2,29],28:36,29:[2,29],30:[2,29],31:37,32:38,40:[2,29],41:[2,29],42:[2,29],47:[2,29],48:[2,29],51:[2,29]},{1:[2,2]},{29:[1,39],30:[1,40]},{29:[2,26],30:[2,26]},{11:[2,42],29:[2,42],30:[2,42],33:41,35:42,37:44,40:[1,45],41:[1,46],42:[1,47],47:[1,43],48:[2,42],51:[2,42]},{5:[2,24],8:[2,24],40:[2,24]},{11:[2,29],29:[2,29],30:[2,29],31:48,32:38,40:[2,29],41:[2,29],42:[2,29],47:[2,29],48:[2,29],51:[2,29]},{11:[1,51],29:[2,49],30:[2,49],34:49,48:[1,50],51:[1,52]},{11:[2,28],29:[2,28],30:[2,28],40:[2,28],41:[2,28],42:[2,28],43:[2,28],47:[2,28],48:[2,28],51:[2,28]},{14:21,24:53,40:[1,18],41:[1,22]},{11:[2,37],29:[2,37],30:[2,37],38:54,39:[2,37],40:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[1,55],45:[1,56],46:[1,57],47:[2,37],48:[2,37],51:[2,37]},{11:[2,34],29:[2,34],30:[2,34],39:[2,34],40:[2,34],41:[2,34],42:[2,34],43:[2,34],44:[2,34],45:[2,34],46:[2,34],47:[2,34],48:[2,34],51:[2,34]},{11:[2,35],29:[2,35],30:[2,35],39:[2,35],40:[2,35],41:[2,35],42:[2,35],43:[2,35],44:[2,35],45:[2,35],46:[2,35],47:[2,35],48:[2,35],51:[2,35]},{30:[2,29],32:59,36:58,40:[2,29],41:[2,29],42:[2,29],43:[2,29]},{29:[2,25],30:[2,25]},{29:[2,27],30:[2,27]},{48:[2,50],49:60,50:[2,50],52:61,53:[1,62]},{29:[2,47],30:[2,47]},{29:[2,48],30:[2,48]},{11:[2,41],29:[2,41],30:[2,41],48:[2,41],51:[2,41]},{11:[2,33],29:[2,33],30:[2,33],39:[1,63],40:[2,33],41:[2,33],42:[2,33],43:[2,33],47:[2,33],48:[2,33],51:[2,33]},{11:[2,38],29:[2,38],30:[2,38],39:[2,38],40:[2,38],41:[2,38],42:[2,38],43:[2,38],47:[2,38],48:[2,38],51:[2,38]},{11:[2,39],29:[2,39],30:[2,39],39:[2,39],40:[2,39],41:[2,39],42:[2,39],43:[2,39],47:[2,39],48:[2,39],51:[2,39]},{11:[2,40],29:[2,40],30:[2,40],39:[2,40],40:[2,40],41:[2,40],42:[2,40],43:[2,40],47:[2,40],48:[2,40],51:[2,40]},{30:[1,65],43:[1,64]},{30:[2,31],35:42,37:44,40:[1,45],41:[1,46],42:[1,47],43:[2,31]},{48:[1,67],50:[1,66]},{48:[2,51],50:[2,51],53:[1,68]},{48:[2,54],50:[2,54],53:[2,54]},{11:[2,32],29:[2,32],30:[2,32],40:[2,32],41:[2,32],42:[2,32],43:[2,32],47:[2,32],48:[2,32],51:[2,32]},{11:[2,36],29:[2,36],30:[2,36],39:[2,36],40:[2,36],41:[2,36],42:[2,36],43:[2,36],44:[2,36],45:[2,36],46:[2,36],47:[2,36],48:[2,36],51:[2,36]},{30:[2,29],32:69,40:[2,29],41:[2,29],42:[2,29],43:[2,29]},{29:[2,46],30:[2,46]},{48:[2,50],49:70,50:[2,50],52:61,53:[1,62]},{48:[2,55],50:[2,55],53:[2,55]},{30:[2,30],35:42,37:44,40:[1,45],41:[1,46],42:[1,47],43:[2,30]},{48:[1,67],50:[1,71]},{48:[2,53],50:[2,53],52:72,53:[1,62]},{48:[2,52],50:[2,52],53:[1,68]}],
defaultActions: {31:[2,1],35:[2,2]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc === 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);

    var ranges = this.lexer.options && this.lexer.options.ranges;

    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError; // because in the generated code 'this.__proto__.parseError' doesn't work for everyone: http://javascriptweblog.wordpress.com/2010/06/07/understanding-javascript-prototypes/
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = self.lexer.lex() || EOF; // $end = 1
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol;
    var preErrorSymbol = null;
    var state, action, a, r;
    var yyval = {};
    var p, len, newState;
    var expected = [];
    var retval = false;

    if (this.pre_parse) {
        this.pre_parse(this.yy);
    }
    if (this.yy.pre_parse) {
        this.yy.pre_parse(this.yy);
    }

    try {
        for (;;) {
            // retreive state number from top of stack
            state = stack[stack.length - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = this.defaultActions[state];
            } else {
                if (symbol === null || typeof symbol === 'undefined') {
                    symbol = lex();
                }
                // read action for current state and first input
                action = table[state] && table[state][symbol];
            }

            // handle parse error
            if (typeof action === 'undefined' || !action.length || !action[0]) {
                var error_rule_depth;
                var errStr = '';

                // Return the rule stack depth where the nearest error rule can be found.
                // Return FALSE when no error recovery rule was found.
                function locateNearestErrorRecoveryRule(state) {
                    var stack_probe = stack.length - 1;
                    var depth = 0;

                    // try to recover from error
                    for(;;) {
                        // check for error recovery rule in this state
                        if ((TERROR.toString()) in table[state]) {
                            return depth;
                        }
                        if (state === 0 || stack_probe < 2) {
                            return false; // No suitable error recovery rule available.
                        }
                        stack_probe -= 2; // popStack(1): [symbol, action]
                        state = stack[stack_probe];
                        ++depth;
                    }
                }

                if (!recovering) {
                    // first see if there's any chance at hitting an error recovery rule:
                    error_rule_depth = locateNearestErrorRecoveryRule(state);

                    // Report error
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push("'" + this.terminals_[p] + "'");
                        }
                    }
                    if (this.lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ": Unexpected " +
                                 (symbol == EOF ? "end of input" :
                                  ("'" + (this.terminals_[symbol] || symbol) + "'"));
                    }
                    a = this.parseError(errStr, p = {
                        text: this.lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: this.lexer.yylineno,
                        loc: yyloc,
                        expected: expected,
                        recoverable: (error_rule_depth !== false)
                    });
    				if (!p.recoverable) {
    					retval = a;
                        break;
    				}
                } else if (preErrorSymbol !== EOF) {
                    error_rule_depth = locateNearestErrorRecoveryRule(state);
                }

                // just recovered from another error
                if (recovering == 3) {
                    if (symbol === EOF || preErrorSymbol === EOF) {
                        retval = this.parseError(errStr || 'Parsing halted while starting to recover from another error.', {
                            text: this.lexer.match,
                            token: this.terminals_[symbol] || symbol,
                            line: this.lexer.yylineno,
                            loc: yyloc,
                            expected: expected,
                            recoverable: false
                        });
                        break;
                    }

                    // discard current lookahead and grab another
                    yyleng = this.lexer.yyleng;
                    yytext = this.lexer.yytext;
                    yylineno = this.lexer.yylineno;
                    yyloc = this.lexer.yylloc;
                    symbol = lex();
                }

                // try to recover from error
                if (error_rule_depth === false) {
                    retval = this.parseError(errStr || 'Parsing halted. No suitable error recovery rule available.', {
                        text: this.lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: this.lexer.yylineno,
                        loc: yyloc,
                        expected: expected,
                        recoverable: false
                    });
                    break;
                }
                popStack(error_rule_depth);

                preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
                symbol = TERROR;         // insert generic error symbol as new lookahead
                state = stack[stack.length-1];
                action = table[state] && table[state][TERROR];
                recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
            }

            // this shouldn't happen, unless resolve defaults are off
            if (action[0] instanceof Array && action.length > 1) {
                retval = this.parseError('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: false
                });
                break;
            }

            switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution / no error
                    yyleng = this.lexer.yyleng;
                    yytext = this.lexer.yytext;
                    yylineno = this.lexer.yylineno;
                    yyloc = this.lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                continue;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length - (len || 1)].first_line,
                    last_line: lstack[lstack.length - 1].last_line,
                    first_column: lstack[lstack.length - (len || 1)].first_column,
                    last_column: lstack[lstack.length - 1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0, -1 * len * 2);
                    vstack = vstack.slice(0, -1 * len);
                    lstack = lstack.slice(0, -1 * len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                stack.push(newState);
                continue;

            case 3:
                // accept
                retval = true;
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } finally {
        var rv;

        if (this.yy.post_parse) {
            rv = this.yy.post_parse(this.yy, retval);
            if (typeof rv !== 'undefined') retval = rv;
        }
        if (this.post_parse) {
            rv = this.post_parse(this.yy, retval);
            if (typeof rv !== 'undefined') retval = rv;
        }
    }

    return retval;
}};

var transform = require('./ebnf-transform').transform;
var ebnf = false;


// transform ebnf to bnf if necessary
function extend(json, grammar) {
    json.bnf = ebnf ? transform(grammar.grammar) : grammar.grammar;
    if (grammar.actionInclude) {
        json.actionInclude = grammar.actionInclude;
    }
    return json;
}

/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

ERROR:2,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            return this.yy.parser.parseError(str, hash) || this.ERROR;
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this._signaled_error_token = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                + oldLines[oldLines.length - lines.length].length - lines[0].length :
                this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            // when the parseError() call returns, we MUST ensure that the error is registered.
            // We accomplish this by signaling an 'error' token to be produced for the current
            // .lex() run.
            this._signaled_error_token = (this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: this.match,
                token: null,
                line: this.yylineno
            }) || this.ERROR);
        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// return (part of the) already matched input, i.e. for error messages
pastInput:function (maxSize) {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        if (maxSize < 0)
            maxSize = past.length;
        else if (!maxSize)
            maxSize = 20;
        return (past.length > maxSize ? '...' + past.substr(-maxSize) : past);
    },

// return (part of the) upcoming input, i.e. for error messages
upcomingInput:function (maxSize) {
        var next = this.match;
        if (maxSize < 0)
            maxSize = next.length + this._input.length;
        else if (!maxSize)
            maxSize = 20;
        if (next.length < maxSize) {
            next += this._input.substr(0, maxSize - next.length);
        }
        return (next.length > maxSize ? next.substr(0, maxSize) + '...' : next);
    },

// return a string which displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput().replace(/\s/g, " ");
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput().replace(/\s/g, " ") + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        } else if (this._signaled_error_token) {
            // produce one 'error' token as .parseError() in reject() did not guarantee a failure signal by throwing an exception!
            token = this._signaled_error_token;
            this._signaled_error_token = false;
            return token;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            token = this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: this.match + this._input,
                token: null,
                line: this.yylineno
            }) || this.ERROR;
            if (token === this.ERROR || token === this.EOF) {
                // we cannot recover from a lexer error that parseError() did not 'recover' for us: we consider the input completely lexed:
                this.done = true;
            }
        }
    },

// return next match that has a token
lex:function lex() {
        var r;
        // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
        if (typeof this.options.pre_lex === 'function') {
            r = this.options.pre_lex.call(this);
        }
        while (!r) {
            r = this.next();
        };
        if (typeof this.options.post_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.post_lex.call(this, r) || r;
        }
        return r;
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"easy_keyword_rules":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0 : 
/*! Conditions:: bnf ebnf */ 
/*! Rule::       %% */ 
 this.pushState('code'); return 5; 
break;
case 1 : 
/*! Conditions:: ebnf */ 
/*! Rule::       \( */ 
 return 42; 
break;
case 2 : 
/*! Conditions:: ebnf */ 
/*! Rule::       \) */ 
 return 43; 
break;
case 3 : 
/*! Conditions:: ebnf */ 
/*! Rule::       \* */ 
 return 44; 
break;
case 4 : 
/*! Conditions:: ebnf */ 
/*! Rule::       \? */ 
 return 45; 
break;
case 5 : 
/*! Conditions:: ebnf */ 
/*! Rule::       \+ */ 
 return 46; 
break;
case 6 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       \s+ */ 
 /* skip whitespace */ 
break;
case 7 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       \/\/.* */ 
 /* skip comment */ 
break;
case 8 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       \/\*(.|\n|\r)*?\*\/ */ 
 /* skip comment */ 
break;
case 9 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       \[{id}\] */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); return 39; 
break;
case 10 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       {id} */ 
 return 40; 
break;
case 11 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       "[^"]+" */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); return 41; 
break;
case 12 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       '[^']+' */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); return 41; 
break;
case 13 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       : */ 
 return 27; 
break;
case 14 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       ; */ 
 return 29; 
break;
case 15 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       \| */ 
 return 30; 
break;
case 16 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       %% */ 
 this.pushState(ebnf ? 'ebnf' : 'bnf'); return 5; 
break;
case 17 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       %ebnf\b */ 
 if (!yy.options) { yy.options = {}; } ebnf = yy.options.ebnf = true; 
break;
case 18 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       %prec\b */ 
 return 47; 
break;
case 19 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       %start\b */ 
 return 13; 
break;
case 20 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       %left\b */ 
 return 21; 
break;
case 21 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       %right\b */ 
 return 22; 
break;
case 22 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       %nonassoc\b */ 
 return 23; 
break;
case 23 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       %parse-param\b */ 
 return 18; 
break;
case 24 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       %lex[\w\W]*?{BR}\s*\/lex\b */ 
 return 15; 
break;
case 25 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       %[a-zA-Z]+[^\r\n]* */ 
 /* ignore unrecognized decl */ 
break;
case 26 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       <[a-zA-Z]*> */ 
 /* ignore type */ 
break;
case 27 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       \{\{[\w\W]*?\}\} */ 
 yy_.yytext = yy_.yytext.substr(2, yy_.yyleng - 4); return 11; 
break;
case 28 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       %\{(.|\r|\n)*?%\} */ 
 yy_.yytext = yy_.yytext.substr(2, yy_.yytext.length - 4); return 11; 
break;
case 29 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       \{ */ 
 yy.depth = 0; this.pushState('action'); return 48; 
break;
case 30 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       ->.* */ 
 yy_.yytext = yy_.yytext.substr(2, yy_.yyleng - 2); return 51; 
break;
case 31 : 
/*! Conditions:: bnf ebnf INITIAL */ 
/*! Rule::       . */ 
 throw new Error("unsupported input character: " + yy_.yytext); /* b0rk on bad characters */ 
break;
case 32 : 
/*! Conditions:: * */ 
/*! Rule::       $ */ 
 return 8; 
break;
case 33 : 
/*! Conditions:: action */ 
/*! Rule::       \/\*(.|\n|\r)*?\*\/ */ 
 return 53; 
break;
case 34 : 
/*! Conditions:: action */ 
/*! Rule::       \/\/.* */ 
 return 53; 
break;
case 35 : 
/*! Conditions:: action */ 
/*! Rule::       \/[^ /]*?['"{}'][^ ]*?\/ */ 
 return 53; // regexp with braces or quotes (and no spaces) 
break;
case 36 : 
/*! Conditions:: action */ 
/*! Rule::       "(\\\\|\\"|[^"])*" */ 
 return 53; 
break;
case 37 : 
/*! Conditions:: action */ 
/*! Rule::       '(\\\\|\\'|[^'])*' */ 
 return 53; 
break;
case 38 : 
/*! Conditions:: action */ 
/*! Rule::       [/"'][^{}/"']+ */ 
 return 53; 
break;
case 39 : 
/*! Conditions:: action */ 
/*! Rule::       [^{}/"']+ */ 
 return 53; 
break;
case 40 : 
/*! Conditions:: action */ 
/*! Rule::       \{ */ 
 yy.depth++; return 48; 
break;
case 41 : 
/*! Conditions:: action */ 
/*! Rule::       \} */ 
 if (yy.depth == 0) { this.popState(); } else { yy.depth--; } return 50; 
break;
case 42 : 
/*! Conditions:: code */ 
/*! Rule::       (.|\n|\r)+ */ 
 return 9; 
break;
}
},
rules: [/^(?:%%)/,/^(?:\()/,/^(?:\))/,/^(?:\*)/,/^(?:\?)/,/^(?:\+)/,/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:\[([a-zA-Z][a-zA-Z0-9_-]*)\])/,/^(?:([a-zA-Z][a-zA-Z0-9_-]*))/,/^(?:"[^"]+")/,/^(?:'[^']+')/,/^(?::)/,/^(?:;)/,/^(?:\|)/,/^(?:%%)/,/^(?:%ebnf\b)/,/^(?:%prec\b)/,/^(?:%start\b)/,/^(?:%left\b)/,/^(?:%right\b)/,/^(?:%nonassoc\b)/,/^(?:%parse-param\b)/,/^(?:%lex[\w\W]*?(\r\n|\n|\r)\s*\/lex\b)/,/^(?:%[a-zA-Z]+[^\r\n]*)/,/^(?:<[a-zA-Z]*>)/,/^(?:\{\{[\w\W]*?\}\})/,/^(?:%\{(.|\r|\n)*?%\})/,/^(?:\{)/,/^(?:->.*)/,/^(?:.)/,/^(?:$)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:\/\/.*)/,/^(?:\/[^ /]*?['"{}'][^ ]*?\/)/,/^(?:"(\\\\|\\"|[^"])*")/,/^(?:'(\\\\|\\'|[^'])*')/,/^(?:[/"'][^{}/"']+)/,/^(?:[^{}/"']+)/,/^(?:\{)/,/^(?:\})/,/^(?:(.|\n|\r)+)/],
conditions: {"bnf":{"rules":[0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true},"ebnf":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true},"action":{"rules":[32,33,34,35,36,37,38,39,40,41],"inclusive":false},"code":{"rules":[32,42],"inclusive":false},"INITIAL":{"rules":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = bnf;
exports.Parser = bnf.Parser;
exports.parse = function () { return bnf.parse.apply(bnf, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}