/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,12,14,16,18,64,73],$V1=[2,6],$V2=[1,5],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,12],$V7=[1,11],$V8=[2,38],$V9=[1,19],$Va=[1,20],$Vb=[1,21],$Vc=[1,22],$Vd=[1,25],$Ve=[1,26],$Vf=[1,27],$Vg=[1,30],$Vh=[1,31],$Vi=[1,34],$Vj=[1,32],$Vk=[1,33],$Vl=[1,43],$Vm=[18,25,36,39,41,44,45,49,50,51,54,55,60,62,63,73],$Vn=[2,31],$Vo=[1,47],$Vp=[1,48],$Vq=[6,12,14,16,18,25,36,40,64,73],$Vr=[6,12,14,16,18,25,36,39,40,41,44,45,49,50,51,54,55,60,62,63,64,73],$Vs=[1,51],$Vt=[1,50],$Vu=[1,52],$Vv=[1,54],$Vw=[36,40],$Vx=[6,12,14,16,18,25,33,36,39,40,41,42,43,44,45,49,50,51,54,55,60,61,62,63,64,73],$Vy=[1,61],$Vz=[6,12,14,16,18,21,64,73],$VA=[6,9,12,14,16,18,25,30,36,39,41,44,45,49,50,51,54,55,60,62,63,64,73,76],$VB=[12,66],$VC=[6,9,18,25,30,36,39,41,44,45,49,50,51,54,55,60,62,63,73],$VD=[54,57,59],$VE=[9,73],$VF=[2,79],$VG=[1,86],$VH=[32,34],$VI=[9,73,76],$VJ=[25,27],$VK=[2,23],$VL=[1,99],$VM=[1,103],$VN=[1,104],$VO=[25,27,29];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"lex":3,"init":4,"definitions":5,"%%":6,"rules":7,"epilogue":8,"EOF":9,"extra_lexer_module_code":10,"definition":11,"NAME":12,"regex":13,"START_INC":14,"names_inclusive":15,"START_EXC":16,"names_exclusive":17,"ACTION":18,"include_macro_code":19,"options":20,"START_COND":21,"rule":22,"start_conditions":23,"action":24,"{":25,"action_body":26,"}":27,"action_comments_body":28,"ACTION_BODY":29,"<":30,"name_list":31,">":32,"*":33,",":34,"regex_list":35,"|":36,"regex_concat":37,"regex_base":38,"(":39,")":40,"SPECIAL_GROUP":41,"+":42,"?":43,"/":44,"/!":45,"name_expansion":46,"range_regex":47,"any_group_regex":48,".":49,"^":50,"$":51,"string":52,"escape_char":53,"NAME_BRACE":54,"REGEX_SET_START":55,"regex_set":56,"REGEX_SET_END":57,"regex_set_atom":58,"REGEX_SET":59,"ESCAPE_CHAR":60,"RANGE_REGEX":61,"STRING_LIT":62,"CHARACTER_LIT":63,"OPTIONS":64,"option_list":65,"OPTIONS_END":66,"option":67,"NAME[option]":68,"=":69,"OPTION_VALUE[value]":70,"NAME[value]":71,"optional_module_code_chunk":72,"INCLUDE":73,"PATH":74,"module_code_chunk":75,"CODE":76,"$accept":0,"$end":1},
terminals_: {2:"error",6:"%%",9:"EOF",12:"NAME",14:"START_INC",16:"START_EXC",18:"ACTION",21:"START_COND",25:"{",27:"}",29:"ACTION_BODY",30:"<",32:">",33:"*",34:",",36:"|",39:"(",40:")",41:"SPECIAL_GROUP",42:"+",43:"?",44:"/",45:"/!",49:".",50:"^",51:"$",54:"NAME_BRACE",55:"REGEX_SET_START",57:"REGEX_SET_END",59:"REGEX_SET",60:"ESCAPE_CHAR",61:"RANGE_REGEX",62:"STRING_LIT",63:"CHARACTER_LIT",64:"OPTIONS",66:"OPTIONS_END",68:"NAME[option]",69:"=",70:"OPTION_VALUE[value]",71:"NAME[value]",73:"INCLUDE",74:"PATH",76:"CODE"},
productions_: [0,[3,5],[8,1],[8,3],[4,0],[5,2],[5,0],[11,2],[11,2],[11,2],[11,1],[11,1],[11,1],[15,1],[15,2],[17,1],[17,2],[7,2],[7,1],[22,3],[24,3],[24,1],[24,1],[26,0],[26,1],[26,5],[26,4],[28,1],[28,2],[23,3],[23,3],[23,0],[31,1],[31,3],[13,1],[35,3],[35,2],[35,1],[35,0],[37,2],[37,1],[38,3],[38,3],[38,2],[38,2],[38,2],[38,2],[38,2],[38,1],[38,2],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[46,1],[48,3],[56,2],[56,1],[58,1],[58,1],[53,1],[47,1],[52,1],[52,1],[20,3],[65,2],[65,1],[67,1],[67,3],[67,3],[10,1],[10,3],[19,2],[19,2],[75,1],[75,2],[72,1],[72,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

          this.$ = { rules: $$[$0-1] };
          if ($$[$0-3][0]) this.$.macros = $$[$0-3][0];
          if ($$[$0-3][1]) this.$.startConditions = $$[$0-3][1];
          if ($$[$0] && $$[$0].trim() !== '') this.$.moduleInclude = $$[$0];
          if (yy.options) this.$.options = yy.options;
          if (yy.actionInclude) this.$.actionInclude = yy.actionInclude;
          delete yy.options;
          delete yy.actionInclude;
          return this.$;
        
break;
case 2: case 12:
 this.$ = null; 
break;
case 3: case 20: case 29:
 this.$ = $$[$0-1]; 
break;
case 4:
 yy.actionInclude = ''; 
break;
case 5:

          this.$ = $$[$0];
          if ($$[$0-1] != null) {
            if ('length' in $$[$0-1]) {
              this.$[0] = this.$[0] || {};
              this.$[0][$$[$0-1][0]] = $$[$0-1][1];
            } else {
              this.$[1] = this.$[1] || {};
              for (var name in $$[$0-1]) {
                this.$[1][name] = $$[$0-1][name];
              }
            }
          }
        
break;
case 6:
 this.$ = [null, null]; 
break;
case 7:
 this.$ = [$$[$0-1], $$[$0]]; 
break;
case 8: case 9: case 21: case 22: case 24: case 27: case 62: case 63: case 72: case 76: case 78:
 this.$ = $$[$0]; 
break;
case 10: case 11:
 yy.actionInclude += $$[$0]; this.$ = null; 
break;
case 13:
 this.$ = {}; this.$[$$[$0]] = 0; 
break;
case 14:
 this.$ = $$[$0-1]; this.$[$$[$0]] = 0; 
break;
case 15:
 this.$ = {}; this.$[$$[$0]] = 1; 
break;
case 16:
 this.$ = $$[$0-1]; this.$[$$[$0]] = 1; 
break;
case 17:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 18: case 32:
 this.$ = [$$[$0]]; 
break;
case 19:
 this.$ = $$[$0-2] ? [$$[$0-2], $$[$0-1], $$[$0]] : [$$[$0-1], $$[$0]]; 
break;
case 23: case 38: case 79:
 this.$ = ''; 
break;
case 25:
 this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 26:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 28: case 39: case 49: case 58: case 77:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 30:
 this.$ = ['*']; 
break;
case 33:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 34:

          this.$ = $$[$0];
          if (yy.options && yy.options.easy_keyword_rules && this.$.match(/[\w\d]$/) && !this.$.match(/\\(r|f|n|t|v|s|b|c[A-Z]|x[0-9A-F]{2}|u[a-fA-F0-9]{4}|[0-7]{1,3})$/)) {
              this.$ += "\\b";
          }
        
break;
case 35:
 this.$ = $$[$0-2] + '|' + $$[$0]; 
break;
case 36:
 this.$ = $$[$0-1] + '|'; 
break;
case 41:
 this.$ = '(' + $$[$0-1] + ')'; 
break;
case 42:
 this.$ = $$[$0-2] + $$[$0-1] + ')'; 
break;
case 43:
 this.$ = $$[$0-1] + '+'; 
break;
case 44:
 this.$ = $$[$0-1] + '*'; 
break;
case 45:
 this.$ = $$[$0-1] + '?'; 
break;
case 46:
 this.$ = '(?=' + $$[$0] + ')'; 
break;
case 47:
 this.$ = '(?!' + $$[$0] + ')'; 
break;
case 51:
 this.$ = '.'; 
break;
case 52:
 this.$ = '^'; 
break;
case 53:
 this.$ = '$'; 
break;
case 57: case 73:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 61:
 this.$ = '{[' + $$[$0] + ']}'; 
break;
case 64:
 this.$ = prepareString($$[$0].substr(1, $$[$0].length - 2)); 
break;
case 69:
 yy.options[$$[$0]] = true; 
break;
case 70: case 71:
 yy.options[$$[$0-2]] = $$[$0]; 
break;
case 74:
 
            var fs = require('fs');
            var fileContent = fs.readFileSync($$[$0], { encoding: 'utf-8' });
            // And no, we don't support nested '%include':
            this.$ = '\n// Included by Jison: ' + $$[$0] + ':\n\n' + fileContent + '\n\n// End Of Include by Jison: ' + $$[$0] + '\n\n';
        
break;
case 75:
 
            console.error("%include MUST be followed by a valid file path"); 
        
break;
}
},
table: [o($V0,[2,4],{3:1,4:2}),{1:[3]},{5:3,6:$V1,11:4,12:$V2,14:$V3,16:$V4,18:$V5,19:9,20:10,64:$V6,73:$V7},{6:[1,13]},{5:14,6:$V1,11:4,12:$V2,14:$V3,16:$V4,18:$V5,19:9,20:10,64:$V6,73:$V7},o([6,12,14,16,18,36,64,73],$V8,{13:15,35:16,37:17,38:18,46:23,48:24,52:28,53:29,39:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,55:$Vh,60:$Vi,62:$Vj,63:$Vk}),{15:35,21:[1,36]},{17:37,21:[1,38]},o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),{2:[1,40],74:[1,39]},{12:$Vl,65:41,67:42},o($Vm,$Vn,{7:44,22:45,23:46,30:$Vo}),{6:[2,5]},o($V0,[2,7]),o([6,12,14,16,18,25,64,73],[2,34],{36:$Vp}),o($Vq,[2,37],{46:23,48:24,52:28,53:29,38:49,39:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,55:$Vh,60:$Vi,62:$Vj,63:$Vk}),o($Vr,[2,40],{47:53,33:$Vs,42:$Vt,43:$Vu,61:$Vv}),o($Vw,$V8,{37:17,38:18,46:23,48:24,52:28,53:29,35:55,39:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,55:$Vh,60:$Vi,62:$Vj,63:$Vk}),o($Vw,$V8,{37:17,38:18,46:23,48:24,52:28,53:29,35:56,39:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,55:$Vh,60:$Vi,62:$Vj,63:$Vk}),{38:57,39:$V9,41:$Va,44:$Vb,45:$Vc,46:23,48:24,49:$Vd,50:$Ve,51:$Vf,52:28,53:29,54:$Vg,55:$Vh,60:$Vi,62:$Vj,63:$Vk},{38:58,39:$V9,41:$Va,44:$Vb,45:$Vc,46:23,48:24,49:$Vd,50:$Ve,51:$Vf,52:28,53:29,54:$Vg,55:$Vh,60:$Vi,62:$Vj,63:$Vk},o($Vx,[2,48]),o($Vx,[2,50]),o($Vx,[2,51]),o($Vx,[2,52]),o($Vx,[2,53]),o($Vx,[2,54]),o($Vx,[2,55]),o([6,12,14,16,18,25,33,36,39,40,41,42,43,44,45,49,50,51,54,55,57,59,60,61,62,63,64,73],[2,56]),{46:62,54:$Vg,56:59,58:60,59:$Vy},o($Vx,[2,64]),o($Vx,[2,65]),o($Vx,[2,62]),o($V0,[2,8],{21:[1,63]}),o($Vz,[2,13]),o($V0,[2,9],{21:[1,64]}),o($Vz,[2,15]),o($VA,[2,74]),o($VA,[2,75]),{66:[1,65]},{12:$Vl,65:66,66:[2,68],67:42},o($VB,[2,69],{69:[1,67]}),o($Vm,$Vn,{23:46,8:68,22:69,6:[1,71],9:[1,70],30:$Vo}),o($VC,[2,18]),o([18,25,36,73],$V8,{35:16,37:17,38:18,46:23,48:24,52:28,53:29,13:72,39:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,55:$Vh,60:$Vi,62:$Vj,63:$Vk}),{12:[1,75],31:73,33:[1,74]},o($Vq,[2,36],{38:18,46:23,48:24,52:28,53:29,37:76,39:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,55:$Vh,60:$Vi,62:$Vj,63:$Vk}),o($Vr,[2,39],{47:53,33:$Vs,42:$Vt,43:$Vu,61:$Vv}),o($Vx,[2,43]),o($Vx,[2,44]),o($Vx,[2,45]),o($Vx,[2,49]),o($Vx,[2,63]),{36:$Vp,40:[1,77]},{36:$Vp,40:[1,78]},o($Vr,[2,46],{47:53,33:$Vs,42:$Vt,43:$Vu,61:$Vv}),o($Vr,[2,47],{47:53,33:$Vs,42:$Vt,43:$Vu,61:$Vv}),{57:[1,79]},{46:62,54:$Vg,56:80,57:[2,59],58:60,59:$Vy},o($VD,[2,60]),o($VD,[2,61]),o($Vz,[2,14]),o($Vz,[2,16]),o($V0,[2,66]),{66:[2,67]},{12:[1,82],"undefined":[1,81]},{1:[2,1]},o($VC,[2,17]),{1:[2,2]},o($VE,$VF,{10:83,72:84,75:85,76:$VG}),{18:[1,89],19:90,24:87,25:[1,88],73:$V7},{32:[1,91],34:[1,92]},{32:[1,93]},o($VH,[2,32]),o($Vq,[2,35],{46:23,48:24,52:28,53:29,38:49,39:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,55:$Vh,60:$Vi,62:$Vj,63:$Vk}),o($Vx,[2,41]),o($Vx,[2,42]),o($Vx,[2,57]),{57:[2,58]},o($VB,[2,70]),o($VB,[2,71]),{9:[1,94]},{9:[2,72],19:95,73:$V7},o($VE,[2,78],{76:[1,96]}),o($VI,[2,76]),o($VC,[2,19]),o($VJ,$VK,{26:97,28:98,29:$VL}),o($VC,[2,21]),o($VC,[2,22]),o($Vm,[2,29]),{12:[1,100]},o($Vm,[2,30]),{1:[2,3]},o($VE,$VF,{72:84,75:85,10:101,76:$VG}),o($VI,[2,77]),{25:$VM,27:[1,102]},o($VJ,[2,24],{29:$VN}),o($VO,[2,27]),o($VH,[2,33]),{9:[2,73]},o($VC,[2,20]),o($VJ,$VK,{28:98,26:105,29:$VL}),o($VO,[2,28]),{25:$VM,27:[1,106]},o($VJ,[2,26],{28:107,29:$VL}),o($VJ,[2,25],{29:$VN})],
defaultActions: {14:[2,5],66:[2,67],68:[2,1],70:[2,2],80:[2,58],94:[2,3],101:[2,73]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    function lex() {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


function encodeRE (s) {
    return s.replace(/([.*+?^${}()|[\]\/\\])/g, '\\$1').replace(/\\\\u([a-fA-F0-9]{4})/g, '\\u$1');
}

function prepareString (s) {
    // unescape slashes
    s = s.replace(/\\\\/g, "\\");
    s = encodeRE(s);
    return s;
};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 29;
break;
case 1:return 29;
break;
case 2:return 29; // regexp with braces or quotes (and no spaces)
break;
case 3:return 29;
break;
case 4:return 29;
break;
case 5:return 29;
break;
case 6:return 29;
break;
case 7:yy.depth++; return 25;
break;
case 8:if (yy.depth == 0) { this.begin('trail'); } else { yy.depth--; } return 27;
break;
case 9:return 12;
break;
case 10:this.popState(); return 32;
break;
case 11:return 34;
break;
case 12:return 33;
break;
case 13:/* empty */
break;
case 14:/* empty */
break;
case 15:this.begin('indented');
break;
case 16:this.begin('code'); return 6;
break;
case 17:return 63;
break;
case 18:return 12;
break;
case 19:return 69;
break;
case 20:yy_.yytext = yy_.yytext.substr(1, yy_.yytext.length - 2); return 'OPTION_VALUE';
break;
case 21:yy_.yytext = yy_.yytext.substr(1, yy_.yytext.length - 2); return 'OPTION_VALUE';
break;
case 22:return 'OPTION_VALUE';
break;
case 23:this.popState(); return 66;
break;
case 24:this.popState(); return 66;
break;
case 25:/* empty */
break;
case 26:return 21;
break;
case 27:this.popState();
break;
case 28:this.popState();
break;
case 29:/* empty */
break;
case 30:this.begin('rules');
break;
case 31:yy.depth = 0; this.begin('action'); return 25;
break;
case 32:this.begin('trail'); yy_.yytext = yy_.yytext.substr(2, yy_.yytext.length - 4); return 18;
break;
case 33:yy_.yytext = yy_.yytext.substr(2, yy_.yytext.length - 4); return 18;
break;
case 34:
                                            // This is an include instruction in place of an action: 
                                            // thanks to the `<indented>.+` rule immediately below we need to semi-duplicate 
                                            // the `%include` token recognition here vs. the almost-identical rule for the same 
                                            // further below.
                                            // There's no real harm as we need to do something special in this case anyway:
                                            // push 2 (two!) conditions.
                                            //
                                            // (Anecdotal: to find that we needed to place this almost-copy here to make the test grammar
                                            // parse correctly took several hours as the debug facilities were - and are - too meager to
                                            // quickly diagnose the problem while we hadn't. So the code got littered with debug prints
                                            // and finally it hit me what the *F* went wrong, after which I saw I needed to add *this* rule!)

                                            // first push the 'trail' condition which will be the follow-up after we're done parsing the path parameter...
                                            this.pushState('trail'); 
                                            // then push the immediate need: the 'path' condition.
                                            this.pushState('path'); 
                                            return 73;
                                        
break;
case 35:this.begin('rules'); return 18;
break;
case 36:/* ignore */
break;
case 37:/* ignore */
break;
case 38:/* empty */
break;
case 39:/* empty */
break;
case 40:return 12;
break;
case 41:yy_.yytext = yy_.yytext.replace(/\\"/g,'"'); return 62;
break;
case 42:yy_.yytext = yy_.yytext.replace(/\\'/g,"'"); return 62;
break;
case 43:this.pushState('set'); return 55;
break;
case 44:return 36;
break;
case 45:return 41;
break;
case 46:return 41;
break;
case 47:return 41;
break;
case 48:return 39;
break;
case 49:return 40;
break;
case 50:return 42;
break;
case 51:return 33;
break;
case 52:return 43;
break;
case 53:return 50;
break;
case 54:return 34;
break;
case 55:return 51;
break;
case 56:this.begin('conditions'); return 30;
break;
case 57:return 45;                    // treated as `(?!atom)`
break;
case 58:return 44;                     // treated as `(?=atom)` 
break;
case 59:return 60;
break;
case 60:yy_.yytext = yy_.yytext.replace(/^\\/g, ''); return 60;
break;
case 61:return 51;
break;
case 62:return 49;
break;
case 63:if (!yy.options) { yy.options = {}; } this.begin('options'); return 64;
break;
case 64:this.begin('start_condition'); return 14;
break;
case 65:this.begin('start_condition'); return 16;
break;
case 66:this.pushState('path'); return 73;
break;
case 67: 
                                            /* ignore unrecognized decl */
                                            console.warn('ignoring unsupported lexer option: ', yy_.yytext, ' @ ' + JSON.stringify(yy_.yylloc) + 'while lexing in ' + this.topState() + ' state:', this._input, ' /////// ', this.matched);
                                        
break;
case 68:this.begin('rules'); return 6;
break;
case 69:return 61;
break;
case 70:return 54;
break;
case 71:return 54;
break;
case 72:return 25;
break;
case 73:return 27;
break;
case 74:throw new Error("unsupported input character: " + yy_.yytext + " @ " + JSON.stringify(yy_.yylloc)); /* b0rk on bad characters */
break;
case 75:return 9;
break;
case 76:return 59;
break;
case 77:this.popState('set'); return 57;
break;
case 78:return 76;
break;
case 79:return 76;      // the bit of CODE just before EOF...
break;
case 80:this.popState(); this.unput(yy_.yytext);
break;
case 81:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); this.popState(); return 74;
break;
case 82:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); this.popState(); return 74;
break;
case 83:// skip whitespace in the line
break;
case 84:this.popState(); return 74;
break;
case 85: 
                                            /* ignore unrecognized decl */
                                            console.warn('ignoring unsupported lexer input: ', yy_.yytext, ' @ ' + JSON.stringify(yy_.yylloc) + 'while lexing in ' + this.topState() + ' state:', this._input, ' /////// ', this.matched);
                                        
break;
}
},
rules: [/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:\/\/.*)/,/^(?:\/[^ \/]*?['"{}'][^ ]*?\/)/,/^(?:"(\\\\|\\"|[^"])*")/,/^(?:'(\\\\|\\'|[^'])*')/,/^(?:[\/"'][^{}\/"']+)/,/^(?:[^{}\/"']+)/,/^(?:\{)/,/^(?:\})/,/^(?:([a-zA-Z_](?:[a-zA-Z0-9_-]*[a-zA-Z0-9_])?))/,/^(?:>)/,/^(?:,)/,/^(?:\*)/,/^(?:(\r\n|\n|\r)+)/,/^(?:\s+(\r\n|\n|\r)+)/,/^(?:\s+)/,/^(?:%%)/,/^(?:[a-zA-Z0-9_]+)/,/^(?:([a-zA-Z_](?:[a-zA-Z0-9_-]*[a-zA-Z0-9_])?))/,/^(?:=)/,/^(?:"(\\\\|\\"|[^"])*")/,/^(?:'(\\\\|\\'|[^'])*')/,/^(?:[^\s\r\n]+)/,/^(?:(\r\n|\n|\r)+)/,/^(?:\s+(\r\n|\n|\r)+)/,/^(?:\s+)/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:(\r\n|\n|\r)+)/,/^(?:\s+(\r\n|\n|\r)+)/,/^(?:\s+)/,/^(?:\s*(\r\n|\n|\r)+)/,/^(?:\{)/,/^(?:%\{(.|(\r\n|\n|\r))*?%\})/,/^(?:%\{(.|(\r\n|\n|\r))*?%\})/,/^(?:%include\b)/,/^(?:.+)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:\/\/.*)/,/^(?:(\r\n|\n|\r)+)/,/^(?:\s+)/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:"(\\\\|\\"|[^"])*")/,/^(?:'(\\\\|\\'|[^'])*')/,/^(?:\[)/,/^(?:\|)/,/^(?:\(\?:)/,/^(?:\(\?=)/,/^(?:\(\?!)/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:\*)/,/^(?:\?)/,/^(?:\^)/,/^(?:,)/,/^(?:<<EOF>>)/,/^(?:<)/,/^(?:\/!)/,/^(?:\/)/,/^(?:\\([0-7]{1,3}|[rfntvsSbBwWdD\\*+()${}|[\]\/.^?]|c[A-Z]|x[0-9A-F]{2}|u[a-fA-F0-9]{4}))/,/^(?:\\.)/,/^(?:\$)/,/^(?:\.)/,/^(?:%options\b)/,/^(?:%s\b)/,/^(?:%x\b)/,/^(?:%include\b)/,/^(?:%([a-zA-Z_](?:[a-zA-Z0-9_-]*[a-zA-Z0-9_])?)[^\r\n]+)/,/^(?:%%)/,/^(?:\{\d+(,\s?\d+|,)?\})/,/^(?:\{([a-zA-Z_][a-zA-Z0-9_]*)\})/,/^(?:\{([a-zA-Z_][a-zA-Z0-9_]*)\})/,/^(?:\{)/,/^(?:\})/,/^(?:.)/,/^(?:$)/,/^(?:(\\\\|\\\]|[^\]])+)/,/^(?:\])/,/^(?:[^\r\n]*(\r|\n)+)/,/^(?:[^\r\n]+)/,/^(?:[\r\n])/,/^(?:'[^\r\n]+')/,/^(?:"[^\r\n]+")/,/^(?:\s+)/,/^(?:[^\s\r\n]+)/,/^(?:.)/],
conditions: {"code":{"rules":[66,67,75,78,79,85],"inclusive":false},"start_condition":{"rules":[26,27,28,29,75,85],"inclusive":false},"options":{"rules":[18,19,20,21,22,23,24,25,71,75,85],"inclusive":false},"conditions":{"rules":[9,10,11,12,75,85],"inclusive":false},"action":{"rules":[0,1,2,3,4,5,6,7,8,75,85],"inclusive":false},"path":{"rules":[75,80,81,82,83,84,85],"inclusive":false},"set":{"rules":[71,75,76,77,85],"inclusive":false},"indented":{"rules":[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,70,72,73,74,75,85],"inclusive":true},"trail":{"rules":[30,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,85],"inclusive":true},"rules":{"rules":[13,14,15,16,17,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,70,72,73,74,75,85],"inclusive":true},"INITIAL":{"rules":[33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,85],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}