// We define these tokens beforehand because we not only wish to employ them 
// in the generated AST stream, but we also wish to have the tokens used in
// the hand-optimized stream to be in the ASCII range if possible, as that
// would reduce the encoded size when we were to 'export' such an AST
// stream to JSON for interchanging it between multiple application 
// instances, for example.
// 
// Note that this definition file is JSON5 (json5.org) format, which is an
// augmented version of standard JSON which allows comments, like this one! :-)  
// 
// Also note that the symbol definition list is an object, not an array,
// similar to the `parser.symbols_` table output by JISON itself when 
// when generating a parser's source code. 
//
// Symbol IDs must be greater or equal to 3 as 0, 1 and 2 are reserved numbers:
// 0 = $accept
// 1 = $end / EOF
// 2 = error
{
//  "%": 37,
//  "&": 38,
//  "(": 40,
//  ")": 41,
//  "*": 42,
//  "+": 43,
  ",": 44,
//  "-": 45,
//  "/": 47,
//  ":": 58,
//  "=": 61,
//  "?": 63,
//  "|": 124,
//  "~": 126,
  ADD: '+',
  ADD_3: true,
  AND: 'A',
  ASSIGN: true,
  BITWISE_AND: '&',
  BITWISE_NOT: '~',
  BITWISE_OR: '|',
  BITWISE_XOR: '^',
  CONDITION: '?',
  CONSTANT: 'c',
  DIVIDE: '/',
  ELSE: true,
  END: 'Y',
  EOF: 1,
  EOL: 'Z',
  EQ: '=',
  ERROR: 3,
  ERROR_AND_SKIP: true,
  EXCHANGE_A_R1: true,
  EXCHANGE_A_R2: true,
  EXCHANGE_R1_R2: true,
  EXEC: true,
  FACTORIAL: 'f',
  FALSE: true,
  FALSE_AND_SKIP: true,
  FUNCTION: 'F',
  FUNCTION_0: '0',
  FUNCTION_1: '1',
  FUNCTION_2: '2',
  FUNCTION_3: '3',
  FUNCTION_N: '9',
  GEQ: 'g',
  GT: '>',
  IF: 'C',
  IF_ELSE: 'Q',
  LEQ: 'l',
  LT: '<',
  MODULO: '%',
  MOVE_ALL_TO_RX: true,
  MOVE_FROM_R1: true,
  MOVE_FROM_R2: true,
  MOVE_R2_TO_R1: true,
  MOVE_TO_R1: true,
  MOVE_TO_R2: true,
  MOVE_TO_RX: true,
  MULTIPLY: '*',
  MULTIPLY_3: 'M',
  NEQ: 'n',
  NOT: '!',
  NUM: 'I',
  NUM_AND_SKIP: 'J',
  OR: 'O',
  PERCENT: 'h',
  POP: true,
  POWER: 'P',
  PUSH: 'v',
  PUSH: true,
  SHIFT_EX: true,
  SKIP: 'S',
  STRING: true,
  STRING_AND_SKIP: true,
  SUBTRACT: '-',
  SUBTRACT_3: true,
  TRUE: true,
  TRUE_AND_SKIP: true,
  UMINUS: 'm',
  UNSHIFT_EX: true,
  UNSHIFT_RX_TO_ALL: true,
  UNSHIFT_RX_TO_R12: true,
  UPLUS: 'a',
  VAR: 'V',
  VAR_TO_VALUE: true,
  VAR_VALUE: true,
  XOR: 'X',
}
