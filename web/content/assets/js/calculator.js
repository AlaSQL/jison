/* parser generated by jison 0.4.17-116 */
/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, errorHash),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *                quotes around literal IDs in a description string.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    productions_: [...],
 *
 *    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$, yystack, ...),
 *               where `...` denotes the (optional) additional arguments the user passed to
 *               `parser.parse(str, ...)`
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash),
 *    parse: function(input),
 *
 *    lexer: {
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash),
 *        setInput: function(input),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(),
 *        upcomingInput: function(),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index),
 *        next: function(),
 *        lex: function(),
 *        begin: function(condition),
 *        popState: function(),
 *        _currentRules: function(),
 *        topState: function(),
 *        pushState: function(condition),
 *        stateStackSize: function(),
 *
 *        options: { ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The parseError function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be empty when we cannot easily produce such a set)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 *  When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 *  instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 *  When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 *  from either the parser or lexer, `this` will still reference the related *parser*
 *  instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 *  Please do note that in the latter situation, the `expected` field will be omitted as
 *  type of failure is assumed not to be due to *parse errors* but rather due to user
 *  action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *  
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another. 
 *                 When it does not return any value, the parser will return the original
 *                 `retval`. 
 *                 This function is invoked immediately before `Parser.post_parse()`.
 *
 *      parseError: function(str, hash)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */
var calculator = (function () {

// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
function JisonParserError(msg, hash) {
    this.message = msg;
    this.hash = hash;
    var stacktrace = (new Error(msg)).stack;
    if (stacktrace) {
      this.stack = stacktrace;
    }
}
JisonParserError.prototype = Object.create(Error.prototype);
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';


var parser = {
EOF: 1,
TERROR: 2,
trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
symbols_: {
  "!": 33,
  "$accept": 0,
  "$end": 1,
  "%": 37,
  "(": 40,
  ")": 41,
  "*": 42,
  "+": 43,
  "-": 45,
  "/": 47,
  "E": 69,
  "EOF": 128,
  "NUMBER": 129,
  "PI": 130,
  "^": 94,
  "e": 101,
  "error": 2,
  "expressions": 127
},
terminals_: {
  1: "$end",
  2: "error",
  33: "!",
  37: "%",
  40: "(",
  41: ")",
  42: "*",
  43: "+",
  45: "-",
  47: "/",
  69: "E",
  94: "^",
  128: "EOF",
  129: "NUMBER",
  130: "PI"
},
nonterminals_: {
  "$accept": {
    0: "expressions $end"
  },
  "expressions": {
    1: "e EOF"
  },
  "e": {
    2: "e + e",
    3: "e - e",
    4: "e * e",
    5: "e / e",
    6: "e ^ e",
    7: "e !",
    8: "e %",
    9: "- e",
    10: "( e )",
    11: "NUMBER",
    12: "E",
    13: "PI"
  }
},
productions_: [
  [
    127,
    2
  ],
  [
    101,
    3
  ],
  [
    101,
    3
  ],
  [
    101,
    3
  ],
  [
    101,
    3
  ],
  [
    101,
    3
  ],
  [
    101,
    2
  ],
  [
    101,
    2
  ],
  [
    101,
    2
  ],
  [
    101,
    3
  ],
  [
    101,
    1
  ],
  [
    101,
    1
  ],
  [
    101,
    1
  ]
],



// ------------------------------


// ║ len┊   ∆║ pop┊   ∆║rule┊   ∆║
// ║   2┊  -3║ 127┊-128║   2┊  -3║
// ║   2┊   0║ 101┊-102║   3┊   1║
// ║   2┊   0║ 101┊   0║   3┊   0║
// ║   2┊   0║ 101┊   0║   3┊   0║
// ║   2┊   0║ 101┊   0║   3┊   0║
// ║   2┊   0║ 101┊   0║   3┊   0║
// ║   2┊   0║ 101┊   0║   2┊  -3║
// ║   2┊   0║ 101┊   0║   2┊   0║
// ║   2┊   0║ 101┊   0║   2┊   0║
// ║   2┊   0║ 101┊   0║   3┊   1║
// ║   2┊   0║ 101┊   0║   1┊  -2║
// ║   2┊   0║ 101┊   0║   1┊   0║
// ║   2┊   0║ 101┊   0║   1┊   0║


// ------------------


  // ,
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */, yystack) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1 : 
/*! Production::     expressions : e EOF */
  typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
          return $$[$0-1];  
break;
case 2 : 
/*! Production::     e : e '+' e */
 this.$ = $$[$0-2]+$$[$0]; 
break;
case 3 : 
/*! Production::     e : e '-' e */
 this.$ = $$[$0-2]-$$[$0]; 
break;
case 4 : 
/*! Production::     e : e '*' e */
 this.$ = $$[$0-2]*$$[$0]; 
break;
case 5 : 
/*! Production::     e : e '/' e */
 this.$ = $$[$0-2]/$$[$0]; 
break;
case 6 : 
/*! Production::     e : e '^' e */
 this.$ = Math.pow($$[$0-2], $$[$0]); 
break;
case 7 : 
/*! Production::     e : e '!' */
 
          this.$ = (function fact(n) { return n == 0 ? 1 : fact(n-1) * n; })($$[$0-1]);
         
break;
case 8 : 
/*! Production::     e : e '%' */
 this.$ = $$[$0-1]/100; 
break;
case 9 : 
/*! Production::     e : '-' e */
 this.$ = -$$[$0]; 
break;
case 10 : 
/*! Production::     e : '(' e ')' */
 this.$ = $$[$0-1]; 
break;
case 11 : 
/*! Production::     e : NUMBER */
 this.$ = Number(yytext); 
break;
case 12 : 
/*! Production::     e : E */
 this.$ = Math.E; 
break;
case 13 : 
/*! Production::     e : PI */
 this.$ = Math.PI; 
break;
}
},
table: [
  {
    40: [
      1,
      4
    ],
    45: [
      1,
      3
    ],
    69: [
      1,
      6
    ],
    101: 2,
    127: 1,
    129: [
      1,
      5
    ],
    130: [
      1,
      7
    ]
  },
  {
    1: [
      3
    ]
  },
  {
    33: [
      1,
      14
    ],
    37: [
      1,
      15
    ],
    42: [
      1,
      11
    ],
    43: [
      1,
      9
    ],
    45: [
      1,
      10
    ],
    47: [
      1,
      12
    ],
    94: [
      1,
      13
    ],
    128: [
      1,
      8
    ]
  },
  {
    40: [
      1,
      4
    ],
    45: [
      1,
      3
    ],
    69: [
      1,
      6
    ],
    101: 16,
    129: [
      1,
      5
    ],
    130: [
      1,
      7
    ]
  },
  {
    40: [
      1,
      4
    ],
    45: [
      1,
      3
    ],
    69: [
      1,
      6
    ],
    101: 17,
    129: [
      1,
      5
    ],
    130: [
      1,
      7
    ]
  },
  {
    33: [
      2,
      11
    ],
    37: [
      2,
      11
    ],
    41: [
      2,
      11
    ],
    42: [
      2,
      11
    ],
    43: [
      2,
      11
    ],
    45: [
      2,
      11
    ],
    47: [
      2,
      11
    ],
    94: [
      2,
      11
    ],
    128: [
      2,
      11
    ]
  },
  {
    33: [
      2,
      12
    ],
    37: [
      2,
      12
    ],
    41: [
      2,
      12
    ],
    42: [
      2,
      12
    ],
    43: [
      2,
      12
    ],
    45: [
      2,
      12
    ],
    47: [
      2,
      12
    ],
    94: [
      2,
      12
    ],
    128: [
      2,
      12
    ]
  },
  {
    33: [
      2,
      13
    ],
    37: [
      2,
      13
    ],
    41: [
      2,
      13
    ],
    42: [
      2,
      13
    ],
    43: [
      2,
      13
    ],
    45: [
      2,
      13
    ],
    47: [
      2,
      13
    ],
    94: [
      2,
      13
    ],
    128: [
      2,
      13
    ]
  },
  {
    1: [
      2,
      1
    ]
  },
  {
    40: [
      1,
      4
    ],
    45: [
      1,
      3
    ],
    69: [
      1,
      6
    ],
    101: 18,
    129: [
      1,
      5
    ],
    130: [
      1,
      7
    ]
  },
  {
    40: [
      1,
      4
    ],
    45: [
      1,
      3
    ],
    69: [
      1,
      6
    ],
    101: 19,
    129: [
      1,
      5
    ],
    130: [
      1,
      7
    ]
  },
  {
    40: [
      1,
      4
    ],
    45: [
      1,
      3
    ],
    69: [
      1,
      6
    ],
    101: 20,
    129: [
      1,
      5
    ],
    130: [
      1,
      7
    ]
  },
  {
    40: [
      1,
      4
    ],
    45: [
      1,
      3
    ],
    69: [
      1,
      6
    ],
    101: 21,
    129: [
      1,
      5
    ],
    130: [
      1,
      7
    ]
  },
  {
    40: [
      1,
      4
    ],
    45: [
      1,
      3
    ],
    69: [
      1,
      6
    ],
    101: 22,
    129: [
      1,
      5
    ],
    130: [
      1,
      7
    ]
  },
  {
    33: [
      2,
      7
    ],
    37: [
      2,
      7
    ],
    41: [
      2,
      7
    ],
    42: [
      2,
      7
    ],
    43: [
      2,
      7
    ],
    45: [
      2,
      7
    ],
    47: [
      2,
      7
    ],
    94: [
      2,
      7
    ],
    128: [
      2,
      7
    ]
  },
  {
    33: [
      2,
      8
    ],
    37: [
      2,
      8
    ],
    41: [
      2,
      8
    ],
    42: [
      2,
      8
    ],
    43: [
      2,
      8
    ],
    45: [
      2,
      8
    ],
    47: [
      2,
      8
    ],
    94: [
      2,
      8
    ],
    128: [
      2,
      8
    ]
  },
  {
    33: [
      2,
      9
    ],
    37: [
      2,
      9
    ],
    41: [
      2,
      9
    ],
    42: [
      2,
      9
    ],
    43: [
      2,
      9
    ],
    45: [
      2,
      9
    ],
    47: [
      2,
      9
    ],
    94: [
      2,
      9
    ],
    128: [
      2,
      9
    ]
  },
  {
    33: [
      1,
      14
    ],
    37: [
      1,
      15
    ],
    41: [
      1,
      23
    ],
    42: [
      1,
      11
    ],
    43: [
      1,
      9
    ],
    45: [
      1,
      10
    ],
    47: [
      1,
      12
    ],
    94: [
      1,
      13
    ]
  },
  {
    33: [
      1,
      14
    ],
    37: [
      1,
      15
    ],
    41: [
      2,
      2
    ],
    42: [
      1,
      11
    ],
    43: [
      2,
      2
    ],
    45: [
      2,
      2
    ],
    47: [
      1,
      12
    ],
    94: [
      1,
      13
    ],
    128: [
      2,
      2
    ]
  },
  {
    33: [
      1,
      14
    ],
    37: [
      1,
      15
    ],
    41: [
      2,
      3
    ],
    42: [
      1,
      11
    ],
    43: [
      2,
      3
    ],
    45: [
      2,
      3
    ],
    47: [
      1,
      12
    ],
    94: [
      1,
      13
    ],
    128: [
      2,
      3
    ]
  },
  {
    33: [
      1,
      14
    ],
    37: [
      1,
      15
    ],
    41: [
      2,
      4
    ],
    42: [
      2,
      4
    ],
    43: [
      2,
      4
    ],
    45: [
      2,
      4
    ],
    47: [
      2,
      4
    ],
    94: [
      1,
      13
    ],
    128: [
      2,
      4
    ]
  },
  {
    33: [
      1,
      14
    ],
    37: [
      1,
      15
    ],
    41: [
      2,
      5
    ],
    42: [
      2,
      5
    ],
    43: [
      2,
      5
    ],
    45: [
      2,
      5
    ],
    47: [
      2,
      5
    ],
    94: [
      1,
      13
    ],
    128: [
      2,
      5
    ]
  },
  {
    33: [
      1,
      14
    ],
    37: [
      1,
      15
    ],
    41: [
      2,
      6
    ],
    42: [
      2,
      6
    ],
    43: [
      2,
      6
    ],
    45: [
      2,
      6
    ],
    47: [
      2,
      6
    ],
    94: [
      2,
      6
    ],
    128: [
      2,
      6
    ]
  },
  {
    33: [
      2,
      10
    ],
    37: [
      2,
      10
    ],
    41: [
      2,
      10
    ],
    42: [
      2,
      10
    ],
    43: [
      2,
      10
    ],
    45: [
      2,
      10
    ],
    47: [
      2,
      10
    ],
    94: [
      2,
      10
    ],
    128: [
      2,
      10
    ]
  }
]


// ------------------------------


// ║   len┊   ∆║symbol┊   ∆║  type┊   ∆║ state┊   ∆║  mode┊   ∆║  goto┊   ∆║  next┊   ∆║
// ║     7┊  -8║    40┊ -41║     2┊  -3║     2┊  -3║     1┊  -2║     4┊  -5║     4┊  -5║
// ║     1┊  -2║    45┊   5║     2┊   0║     1┊  -2║     1┊   0║     3┊  -4║     3┊  -4║
// ║     8┊   7║    69┊  24║     2┊   0║    16┊  15║     1┊   0║     6┊   3║     6┊   3║
// ║     6┊  -7║   101┊  32║     0┊  -1║    17┊   1║     1┊   0║     5┊  -6║     2┊  -3║
// ║     6┊   0║   127┊  26║     0┊   0║    18┊   1║     1┊   0║     7┊   2║     1┊  -2║
// ║     9┊   3║   129┊   2║     2┊   2║    19┊   1║     3┊   2║     0┊  -1║     5┊   4║
// ║     9┊   0║   130┊   1║     2┊   0║    20┊   1║     1┊  -2║    14┊  14║     7┊   2║
// ║     9┊   0║     1┊  -2║     1┊  -2║    21┊   1║     1┊   0║    15┊   1║     0┊  -1║
// ║     1┊  -2║    33┊  32║     2┊   1║    22┊   1║     1┊   0║    11┊ -12║    14┊  14║
// ║     6┊   5║    37┊   4║     2┊   0║     .┊   .║     1┊   0║     9┊ -10║    15┊   1║
// ║     6┊   0║    42┊   5║     2┊   0║     .┊   .║     1┊   0║    10┊   1║    11┊ -12║
// ║     6┊   0║    43┊   1║     2┊   0║     .┊   .║     1┊   0║    12┊   2║     9┊ -10║
// ║     6┊   0║    45┊   2║     2┊   0║     .┊   .║     1┊   0║    13┊   1║    10┊   1║
// ║     6┊   0║    47┊   2║     2┊   0║     .┊   .║     1┊   0║     8┊  -9║    12┊   2║
// ║     9┊   3║    94┊  47║     2┊   0║     .┊   .║     1┊   0║     4┊  -5║    13┊   1║
// ║     9┊   0║   128┊  34║     2┊   0║     .┊   .║     1┊   0║     3┊  -4║     8┊  -9║
// ║     9┊   0║    40┊ -41║     2┊   0║     .┊   .║     1┊   0║     6┊   3║     4┊  -5║
// ║     8┊  -9║    45┊   5║     2┊   0║     .┊   .║     1┊   0║     5┊  -6║     3┊  -4║
// ║     9┊   1║    69┊  24║     2┊   0║     .┊   .║     1┊   0║     7┊   2║     6┊   3║
// ║     9┊   0║   101┊  32║     0┊  -1║     .┊   .║     1┊   0║     4┊  -5║    16┊  10║
// ║     9┊   0║   129┊  28║     2┊   2║     .┊   .║     1┊   0║     3┊  -4║     5┊  -6║
// ║     9┊   0║   130┊   1║     2┊   0║     .┊   .║     1┊   0║     6┊   3║     7┊   2║
// ║     9┊   0║    40┊ -41║     2┊   0║     .┊   .║     1┊   0║     5┊  -6║     4┊  -5║
// ║     9┊   0║    45┊   5║     2┊   0║     .┊   .║     1┊   0║     7┊   2║     3┊  -4║
// ║     .┊   .║    69┊  24║     2┊   0║     .┊   .║     2┊   1║    11┊   4║     6┊   3║
// ║     .┊   .║   101┊  32║     0┊  -1║     .┊   .║     2┊   0║    11┊   0║    17┊  11║
// ║     .┊   .║   129┊  28║     2┊   2║     .┊   .║     2┊   0║    11┊   0║     5┊  -6║
// ║     .┊   .║   130┊   1║     2┊   0║     .┊   .║     2┊   0║    11┊   0║     7┊   2║
// ║     .┊   .║    33┊ -34║     2┊   0║     .┊   .║     2┊   0║    11┊   0║    11┊   4║
// ║     .┊   .║    37┊   4║     2┊   0║     .┊   .║     2┊   0║    11┊   0║    11┊   0║
// ║     .┊   .║    41┊   4║     2┊   0║     .┊   .║     2┊   0║    11┊   0║    11┊   0║
// ║     .┊   .║    42┊   1║     2┊   0║     .┊   .║     2┊   0║    11┊   0║    11┊   0║
// ║     .┊   .║    43┊   1║     2┊   0║     .┊   .║     2┊   0║    11┊   0║    11┊   0║
// ║     .┊   .║    45┊   2║     2┊   0║     .┊   .║     2┊   0║    12┊   1║    11┊   0║
// ║     .┊   .║    47┊   2║     2┊   0║     .┊   .║     2┊   0║    12┊   0║    11┊   0║
// ║     .┊   .║    94┊  47║     2┊   0║     .┊   .║     2┊   0║    12┊   0║    11┊   0║
// ║     .┊   .║   128┊  34║     2┊   0║     .┊   .║     2┊   0║    12┊   0║    11┊   0║
// ║     .┊   .║    33┊ -34║     2┊   0║     .┊   .║     2┊   0║    12┊   0║    12┊   1║
// ║     .┊   .║    37┊   4║     2┊   0║     .┊   .║     2┊   0║    12┊   0║    12┊   0║
// ║     .┊   .║    41┊   4║     2┊   0║     .┊   .║     2┊   0║    12┊   0║    12┊   0║
// ║     .┊   .║    42┊   1║     2┊   0║     .┊   .║     2┊   0║    12┊   0║    12┊   0║
// ║     .┊   .║    43┊   1║     2┊   0║     .┊   .║     2┊   0║    12┊   0║    12┊   0║
// ║     .┊   .║    45┊   2║     2┊   0║     .┊   .║     2┊   0║    13┊   1║    12┊   0║
// ║     .┊   .║    47┊   2║     2┊   0║     .┊   .║     2┊   0║    13┊   0║    12┊   0║
// ║     .┊   .║    94┊  47║     2┊   0║     .┊   .║     2┊   0║    13┊   0║    12┊   0║
// ║     .┊   .║   128┊  34║     2┊   0║     .┊   .║     2┊   0║    13┊   0║    12┊   0║
// ║     .┊   .║    33┊ -34║     2┊   0║     .┊   .║     2┊   0║    13┊   0║    13┊   1║
// ║     .┊   .║    37┊   4║     2┊   0║     .┊   .║     2┊   0║    13┊   0║    13┊   0║
// ║     .┊   .║    41┊   4║     2┊   0║     .┊   .║     2┊   0║    13┊   0║    13┊   0║
// ║     .┊   .║    42┊   1║     2┊   0║     .┊   .║     2┊   0║    13┊   0║    13┊   0║
// ║     .┊   .║    43┊   1║     2┊   0║     .┊   .║     2┊   0║    13┊   0║    13┊   0║
// ║     .┊   .║    45┊   2║     2┊   0║     .┊   .║     2┊   0║     1┊  -2║    13┊   0║
// ║     .┊   .║    47┊   2║     2┊   0║     .┊   .║     1┊  -2║     4┊   3║    13┊   0║
// ║     .┊   .║    94┊  47║     2┊   0║     .┊   .║     1┊   0║     3┊  -4║    13┊   0║
// ║     .┊   .║   128┊  34║     2┊   0║     .┊   .║     1┊   0║     6┊   3║    13┊   0║
// ║     .┊   .║     1┊  -2║     2┊   0║     .┊   .║     1┊   0║     5┊  -6║     1┊  -2║
// ║     .┊   .║    40┊  39║     2┊   0║     .┊   .║     1┊   0║     7┊   2║     4┊   3║
// ║     .┊   .║    45┊   5║     2┊   0║     .┊   .║     1┊   0║     4┊  -5║     3┊  -4║
// ║     .┊   .║    69┊  24║     2┊   0║     .┊   .║     1┊   0║     3┊  -4║     6┊   3║
// ║     .┊   .║   101┊  32║     0┊  -1║     .┊   .║     1┊   0║     6┊   3║    18┊  12║
// ║     .┊   .║   129┊  28║     2┊   2║     .┊   .║     1┊   0║     5┊  -6║     5┊  -6║
// ║     .┊   .║   130┊   1║     2┊   0║     .┊   .║     1┊   0║     7┊   2║     7┊   2║
// ║     .┊   .║    40┊ -41║     2┊   0║     .┊   .║     1┊   0║     4┊  -5║     4┊  -5║
// ║     .┊   .║    45┊   5║     2┊   0║     .┊   .║     1┊   0║     3┊  -4║     3┊  -4║
// ║     .┊   .║    69┊  24║     2┊   0║     .┊   .║     1┊   0║     6┊   3║     6┊   3║
// ║     .┊   .║   101┊  32║     0┊  -1║     .┊   .║     1┊   0║     5┊  -6║    19┊  13║
// ║     .┊   .║   129┊  28║     2┊   2║     .┊   .║     1┊   0║     7┊   2║     5┊  -6║
// ║     .┊   .║   130┊   1║     2┊   0║     .┊   .║     1┊   0║     4┊  -5║     7┊   2║
// ║     .┊   .║    40┊ -41║     2┊   0║     .┊   .║     1┊   0║     3┊  -4║     4┊  -5║
// ║     .┊   .║    45┊   5║     2┊   0║     .┊   .║     1┊   0║     6┊   3║     3┊  -4║
// ║     .┊   .║    69┊  24║     2┊   0║     .┊   .║     1┊   0║     5┊  -6║     6┊   3║
// ║     .┊   .║   101┊  32║     0┊  -1║     .┊   .║     1┊   0║     7┊   2║    20┊  14║
// ║     .┊   .║   129┊  28║     2┊   2║     .┊   .║     1┊   0║     4┊  -5║     5┊  -6║
// ║     .┊   .║   130┊   1║     2┊   0║     .┊   .║     1┊   0║     3┊  -4║     7┊   2║
// ║     .┊   .║    40┊ -41║     2┊   0║     .┊   .║     1┊   0║     6┊   3║     4┊  -5║
// ║     .┊   .║    45┊   5║     2┊   0║     .┊   .║     1┊   0║     5┊  -6║     3┊  -4║
// ║     .┊   .║    69┊  24║     2┊   0║     .┊   .║     1┊   0║     7┊   2║     6┊   3║
// ║     .┊   .║   101┊  32║     0┊  -1║     .┊   .║     2┊   1║     7┊   0║    21┊  15║
// ║     .┊   .║   129┊  28║     2┊   2║     .┊   .║     2┊   0║     7┊   0║     5┊  -6║
// ║     .┊   .║   130┊   1║     2┊   0║     .┊   .║     2┊   0║     7┊   0║     7┊   2║
// ║     .┊   .║    40┊ -41║     2┊   0║     .┊   .║     2┊   0║     7┊   0║     4┊  -5║
// ║     .┊   .║    45┊   5║     2┊   0║     .┊   .║     2┊   0║     7┊   0║     3┊  -4║
// ║     .┊   .║    69┊  24║     2┊   0║     .┊   .║     2┊   0║     7┊   0║     6┊   3║
// ║     .┊   .║   101┊  32║     0┊  -1║     .┊   .║     2┊   0║     7┊   0║    22┊  16║
// ║     .┊   .║   129┊  28║     2┊   2║     .┊   .║     2┊   0║     7┊   0║     5┊  -6║
// ║     .┊   .║   130┊   1║     2┊   0║     .┊   .║     2┊   0║     7┊   0║     7┊   2║
// ║     .┊   .║    33┊ -34║     2┊   0║     .┊   .║     2┊   0║     8┊   1║     7┊   0║
// ║     .┊   .║    37┊   4║     2┊   0║     .┊   .║     2┊   0║     8┊   0║     7┊   0║
// ║     .┊   .║    41┊   4║     2┊   0║     .┊   .║     2┊   0║     8┊   0║     7┊   0║
// ║     .┊   .║    42┊   1║     2┊   0║     .┊   .║     2┊   0║     8┊   0║     7┊   0║
// ║     .┊   .║    43┊   1║     2┊   0║     .┊   .║     2┊   0║     8┊   0║     7┊   0║
// ║     .┊   .║    45┊   2║     2┊   0║     .┊   .║     2┊   0║     8┊   0║     7┊   0║
// ║     .┊   .║    47┊   2║     2┊   0║     .┊   .║     2┊   0║     8┊   0║     7┊   0║
// ║     .┊   .║    94┊  47║     2┊   0║     .┊   .║     2┊   0║     8┊   0║     7┊   0║
// ║     .┊   .║   128┊  34║     2┊   0║     .┊   .║     2┊   0║     8┊   0║     7┊   0║
// ║     .┊   .║    33┊ -34║     2┊   0║     .┊   .║     2┊   0║     9┊   1║     8┊   1║
// ║     .┊   .║    37┊   4║     2┊   0║     .┊   .║     2┊   0║     9┊   0║     8┊   0║
// ║     .┊   .║    41┊   4║     2┊   0║     .┊   .║     2┊   0║     9┊   0║     8┊   0║
// ║     .┊   .║    42┊   1║     2┊   0║     .┊   .║     2┊   0║     9┊   0║     8┊   0║
// ║     .┊   .║    43┊   1║     2┊   0║     .┊   .║     2┊   0║     9┊   0║     8┊   0║
// ║     .┊   .║    45┊   2║     2┊   0║     .┊   .║     2┊   0║     9┊   0║     8┊   0║
// ║     .┊   .║    47┊   2║     2┊   0║     .┊   .║     2┊   0║     9┊   0║     8┊   0║
// ║     .┊   .║    94┊  47║     2┊   0║     .┊   .║     2┊   0║     9┊   0║     8┊   0║
// ║     .┊   .║   128┊  34║     2┊   0║     .┊   .║     2┊   0║     9┊   0║     8┊   0║
// ║     .┊   .║    33┊ -34║     2┊   0║     .┊   .║     1┊  -2║    14┊   5║     9┊   1║
// ║     .┊   .║    37┊   4║     2┊   0║     .┊   .║     1┊   0║    15┊   1║     9┊   0║
// ║     .┊   .║    41┊   4║     2┊   0║     .┊   .║     1┊   0║    23┊   8║     9┊   0║
// ║     .┊   .║    42┊   1║     2┊   0║     .┊   .║     1┊   0║    11┊ -12║     9┊   0║
// ║     .┊   .║    43┊   1║     2┊   0║     .┊   .║     1┊   0║     9┊ -10║     9┊   0║
// ║     .┊   .║    45┊   2║     2┊   0║     .┊   .║     1┊   0║    10┊   1║     9┊   0║
// ║     .┊   .║    47┊   2║     2┊   0║     .┊   .║     1┊   0║    12┊   2║     9┊   0║
// ║     .┊   .║    94┊  47║     2┊   0║     .┊   .║     1┊   0║    13┊   1║     9┊   0║
// ║     .┊   .║   128┊  34║     2┊   0║     .┊   .║     1┊   0║    14┊   1║     9┊   0║
// ║     .┊   .║    33┊ -34║     2┊   0║     .┊   .║     1┊   0║    15┊   1║    14┊   5║
// ║     .┊   .║    37┊   4║     2┊   0║     .┊   .║     2┊   1║     2┊  -3║    15┊   1║
// ║     .┊   .║    41┊   4║     2┊   0║     .┊   .║     1┊  -2║    11┊   9║    23┊   8║
// ║     .┊   .║    42┊   1║     2┊   0║     .┊   .║     2┊   1║     2┊  -3║    11┊ -12║
// ║     .┊   .║    43┊   1║     2┊   0║     .┊   .║     2┊   0║     2┊   0║     9┊ -10║
// ║     .┊   .║    45┊   2║     2┊   0║     .┊   .║     1┊  -2║    12┊  10║    10┊   1║
// ║     .┊   .║    47┊   2║     2┊   0║     .┊   .║     1┊   0║    13┊   1║    12┊   2║
// ║     .┊   .║    94┊  47║     2┊   0║     .┊   .║     2┊   1║     2┊  -3║    13┊   1║
// ║     .┊   .║    33┊ -34║     2┊   0║     .┊   .║     1┊  -2║    14┊  12║    14┊   1║
// ║     .┊   .║    37┊   4║     2┊   0║     .┊   .║     1┊   0║    15┊   1║    15┊   1║
// ║     .┊   .║    41┊   4║     2┊   0║     .┊   .║     2┊   1║     3┊  -4║     2┊  -3║
// ║     .┊   .║    42┊   1║     2┊   0║     .┊   .║     1┊  -2║    11┊   8║    11┊   9║
// ║     .┊   .║    43┊   1║     2┊   0║     .┊   .║     2┊   1║     3┊  -4║     2┊  -3║
// ║     .┊   .║    45┊   2║     2┊   0║     .┊   .║     2┊   0║     3┊   0║     2┊   0║
// ║     .┊   .║    47┊   2║     2┊   0║     .┊   .║     1┊  -2║    12┊   9║    12┊  10║
// ║     .┊   .║    94┊  47║     2┊   0║     .┊   .║     1┊   0║    13┊   1║    13┊   1║
// ║     .┊   .║   128┊  34║     2┊   0║     .┊   .║     2┊   1║     3┊  -4║     2┊  -3║
// ║     .┊   .║    33┊ -34║     2┊   0║     .┊   .║     1┊  -2║    14┊  11║    14┊  12║
// ║     .┊   .║    37┊   4║     2┊   0║     .┊   .║     1┊   0║    15┊   1║    15┊   1║
// ║     .┊   .║    41┊   4║     2┊   0║     .┊   .║     2┊   1║     4┊  -5║     3┊  -4║
// ║     .┊   .║    42┊   1║     2┊   0║     .┊   .║     2┊   0║     4┊   0║    11┊   8║
// ║     .┊   .║    43┊   1║     2┊   0║     .┊   .║     2┊   0║     4┊   0║     3┊  -4║
// ║     .┊   .║    45┊   2║     2┊   0║     .┊   .║     2┊   0║     4┊   0║     3┊   0║
// ║     .┊   .║    47┊   2║     2┊   0║     .┊   .║     2┊   0║     4┊   0║    12┊   9║
// ║     .┊   .║    94┊  47║     2┊   0║     .┊   .║     1┊  -2║    13┊   9║    13┊   1║
// ║     .┊   .║   128┊  34║     2┊   0║     .┊   .║     2┊   1║     4┊  -5║     3┊  -4║
// ║     .┊   .║    33┊ -34║     2┊   0║     .┊   .║     1┊  -2║    14┊  10║    14┊  11║
// ║     .┊   .║    37┊   4║     2┊   0║     .┊   .║     1┊   0║    15┊   1║    15┊   1║
// ║     .┊   .║    41┊   4║     2┊   0║     .┊   .║     2┊   1║     5┊  -6║     4┊  -5║
// ║     .┊   .║    42┊   1║     2┊   0║     .┊   .║     2┊   0║     5┊   0║     4┊   0║
// ║     .┊   .║    43┊   1║     2┊   0║     .┊   .║     2┊   0║     5┊   0║     4┊   0║
// ║     .┊   .║    45┊   2║     2┊   0║     .┊   .║     2┊   0║     5┊   0║     4┊   0║
// ║     .┊   .║    47┊   2║     2┊   0║     .┊   .║     2┊   0║     5┊   0║     4┊   0║
// ║     .┊   .║    94┊  47║     2┊   0║     .┊   .║     1┊  -2║    13┊   8║    13┊   9║
// ║     .┊   .║   128┊  34║     2┊   0║     .┊   .║     2┊   1║     5┊  -6║     4┊  -5║
// ║     .┊   .║    33┊ -34║     2┊   0║     .┊   .║     1┊  -2║    14┊   9║    14┊  10║
// ║     .┊   .║    37┊   4║     2┊   0║     .┊   .║     1┊   0║    15┊   1║    15┊   1║
// ║     .┊   .║    41┊   4║     2┊   0║     .┊   .║     2┊   1║     6┊  -7║     5┊  -6║
// ║     .┊   .║    42┊   1║     2┊   0║     .┊   .║     2┊   0║     6┊   0║     5┊   0║
// ║     .┊   .║    43┊   1║     2┊   0║     .┊   .║     2┊   0║     6┊   0║     5┊   0║
// ║     .┊   .║    45┊   2║     2┊   0║     .┊   .║     2┊   0║     6┊   0║     5┊   0║
// ║     .┊   .║    47┊   2║     2┊   0║     .┊   .║     2┊   0║     6┊   0║     5┊   0║
// ║     .┊   .║    94┊  47║     2┊   0║     .┊   .║     2┊   0║     6┊   0║    13┊   8║
// ║     .┊   .║   128┊  34║     2┊   0║     .┊   .║     2┊   0║     6┊   0║     5┊  -6║
// ║     .┊   .║    33┊ -34║     2┊   0║     .┊   .║     2┊   0║    10┊   4║    14┊   9║
// ║     .┊   .║    37┊   4║     2┊   0║     .┊   .║     2┊   0║    10┊   0║    15┊   1║
// ║     .┊   .║    41┊   4║     2┊   0║     .┊   .║     2┊   0║    10┊   0║     6┊  -7║
// ║     .┊   .║    42┊   1║     2┊   0║     .┊   .║     2┊   0║    10┊   0║     6┊   0║
// ║     .┊   .║    43┊   1║     2┊   0║     .┊   .║     2┊   0║    10┊   0║     6┊   0║
// ║     .┊   .║    45┊   2║     2┊   0║     .┊   .║     2┊   0║    10┊   0║     6┊   0║
// ║     .┊   .║    47┊   2║     2┊   0║     .┊   .║     2┊   0║    10┊   0║     6┊   0║
// ║     .┊   .║    94┊  47║     2┊   0║     .┊   .║     2┊   0║    10┊   0║     6┊   0║
// ║     .┊   .║   128┊  34║     2┊   0║     .┊   .║     2┊   0║    10┊   0║     6┊   0║
// ║     .┊   .║    33┊ -34║     2┊   0║     .┊   .║     .┊   .║     .┊   .║    10┊   4║
// ║     .┊   .║    37┊   4║     2┊   0║     .┊   .║     .┊   .║     .┊   .║    10┊   0║
// ║     .┊   .║    41┊   4║     2┊   0║     .┊   .║     .┊   .║     .┊   .║    10┊   0║
// ║     .┊   .║    42┊   1║     2┊   0║     .┊   .║     .┊   .║     .┊   .║    10┊   0║
// ║     .┊   .║    43┊   1║     2┊   0║     .┊   .║     .┊   .║     .┊   .║    10┊   0║
// ║     .┊   .║    45┊   2║     2┊   0║     .┊   .║     .┊   .║     .┊   .║    10┊   0║
// ║     .┊   .║    47┊   2║     2┊   0║     .┊   .║     .┊   .║     .┊   .║    10┊   0║
// ║     .┊   .║    94┊  47║     2┊   0║     .┊   .║     .┊   .║     .┊   .║    10┊   0║
// ║     .┊   .║   128┊  34║     2┊   0║     .┊   .║     .┊   .║     .┊   .║    10┊   0║


// ------------------


,
defaultActions: {
  8: [
    2,
    1
  ]
},



// ------------------------------


// ║ len┊   ∆║ pop┊   ∆║rule┊   ∆║


// ------------------


  // ,
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new this.JisonParserError(str, hash);
    }
},
quoteName: function quoteName(id_str) {
    return '"' + id_str + '"';
},
describeSymbol: function describeSymbol(symbol) {
    if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
        return this.terminal_descriptions_[symbol];
    } 
    else if (symbol === this.EOF) {
        return 'end of input';
    }
    else if (this.terminals_[symbol]) {
        return this.quoteName(this.terminals_[symbol]);
    }
    return null;
},
parse: function parse(input) {
    var self = this,
        stack = [0],        // state stack: stores pairs of state (odd indexes) and token (even indexes)

        vstack = [null],    // semantic value stack
        lstack = [],        // location stack
        table = this.table,

        TERROR = this.TERROR,
        EOF = this.EOF;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState = {
      yy: {}
    };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc === 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    
    if (typeof lexer.yytext === 'undefined') {
        lexer.yytext = '';
    }
    var yytext = lexer.yytext;
    if (typeof lexer.yylineno === 'undefined') {
        lexer.yylineno = 0;
    }
    var yylineno = lexer.yylineno;
    if (typeof lexer.yyleng === 'undefined') {
        lexer.yyleng = 0;
    }
    var yyleng = lexer.yyleng;

    var ranges = lexer.options && lexer.options.ranges;

    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    }
    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState.yy.quoteName === 'function') {
        this.quoteName = sharedState.yy.quoteName;
    }

    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }


    function lex() {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }


    var symbol = null;
    var preErrorSymbol = null;
    var state, action, r;
    var yyval = {};
    var p, len, this_production, lstack_begin, lstack_end, newState;
    var expected = [];
    var retval = false;

    if (this.pre_parse) {
        this.pre_parse.call(this, sharedState.yy);
    }
    if (sharedState.yy.pre_parse) {
        sharedState.yy.pre_parse.call(this, sharedState.yy);
    }



    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    // 
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans.
    // 
    // The returned list (array) will not contain any duplicate entries.
    function collect_expected_token_set(state) {
        var tokenset = [];
        var check = {};
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (self.state_descriptions_ && self.state_descriptions_[p]) {
            return [
                self.state_descriptions_[p]
            ];
        }
        for (var p in table[state]) {
            if (p !== TERROR) {
                var d = self.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    }

    try {
        for (;;) {
            // retrieve state number from top of stack
            state = stack[stack.length - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = this.defaultActions[state];
            } else {
                // The single `==` condition below covers both these `===` comparisons in a single
                // operation:
                // 
                //     if (symbol === null || typeof symbol === 'undefined') ...
                if (symbol == null) {
                    symbol = lex();
                }
                // read action for current state and first input
                action = table[state] && table[state][symbol];
            }


            // handle parse error
            if (!action || !action.length || !action[0]) {
                var errStr;

                // Report error
                expected = collect_expected_token_set(state);
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ':\n' + lexer.showPosition() + '\n';
                } else {
                    errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                }
                if (expected.length) {
                    errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + (this.describeSymbol(symbol) || symbol);
                } else {
                    errStr += 'Unexpected ' + (this.describeSymbol(symbol) || symbol);
                }
                // we cannot recover from the error!
                retval = this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    token_id: symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    expected: expected,
                    recoverable: false,
                    state_stack: stack,
                    value_stack: vstack,
                    location_stack: lstack,
                    lexer: lexer
                });
                break;
            }


            switch (action[0]) {
            default:
                // this shouldn't happen, unless resolve defaults are off
                if (action[0] instanceof Array) {
                    retval = this.parseError('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        token_id: symbol,
                        line: lexer.yylineno,
                        loc: lexer.yylloc,
                        expected: expected,
                        recoverable: false,
                        state_stack: stack,
                        value_stack: vstack,
                        location_stack: lstack,
                        lexer: lexer
                    });
                    break;
                }
                // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                // or a buggy LUT (LookUp Table):
                retval = this.parseError(errStr || 'Parsing halted. No viable error recovery approach available due to internal system failure.', {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    token_id: symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    expected: expected,
                    recoverable: false,
                    state_stack: stack,
                    value_stack: vstack,
                    location_stack: lstack,
                    lexer: lexer
                });
                break;

            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution / no error
                    // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;


                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                continue;

            case 2:
                // reduce
                //this.reductionCount++;
                newState = action[1];
                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards... 
                len = this_production[1];
                lstack_end = lstack.length;
                lstack_begin = lstack_end - (len || 1);
                lstack_end--;

                // perform semantic action
                yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack_begin].first_line,
                    last_line: lstack[lstack_end].last_line,
                    first_column: lstack[lstack_begin].first_column,
                    last_column: lstack[lstack_end].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack_begin].range[0], lstack[lstack_end].range[1]];
                }
                // TODO:
                // yyerror(msg)
                // yyerrok
                // len
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, newState, vstack, lstack, stack].concat(args));

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                if (len) {
                    popStack(len);
                }

                stack.push(this_production[0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                stack.push(newState);
                continue;

            case 3:
                // accept
                retval = true;
                // Return the `$accept` rule's `$$` result, if available.
                // 
                // Also note that JISON always adds this top-most `$accept` rule (with implicit, 
                // default, action):
                //   
                //     $accept: <startSymbol> $end
                //                  %{ $$ = $1; @$ = @1; %}
                //     
                // which, combined with the parse kernel's `$accept` state behaviour coded below, 
                // will produce the `$$` value output of the <startSymbol> rule as the parse result, 
                // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                // 
                // In code:
                // 
                //                  %{
                //                      @$ = @1;            // if location tracking support is included
                //                      if (typeof $1 !== 'undefined')
                //                          return $1;
                //                      else
                //                          true;           // the default parse result if the rule actions don't produce anything
                //                  %}
                if (typeof yyval.$ !== 'undefined') {
                    retval = yyval.$;
                }
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } catch (ex) {
        // report exceptions through the parseError callback too:
        retval = this.parseError(errStr || 'Parsing aborted due to exception.', {
            exception: ex,
            text: lexer.match,
            token: this.terminals_[symbol] || symbol,
            token_id: symbol,
            line: lexer.yylineno,
            loc: lexer.yylloc,
            // expected: expected,
            recoverable: false,
            state_stack: stack,
            value_stack: vstack,
            location_stack: lstack,
            lexer: lexer
        });
    } finally {
        var rv;

        if (sharedState.yy.post_parse) {
            rv = sharedState.yy.post_parse.call(this, sharedState.yy, retval);
            if (typeof rv !== 'undefined') retval = rv;
        }
        if (this.post_parse) {
            rv = this.post_parse.call(this, sharedState.yy, retval);
            if (typeof rv !== 'undefined') retval = rv;
        }
    }

    return retval;
}
};

/* generated by jison-lex 0.3.4-116 */
var lexer = (function () {
// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
function JisonLexerError(msg, hash) {
    this.message = msg;
    this.hash = hash;
    var stacktrace = (new Error(msg)).stack;
    if (stacktrace) {
      this.stack = stacktrace;
    }
}
JisonLexerError.prototype = Object.create(Error.prototype);
JisonLexerError.prototype.constructor = JisonLexerError;
JisonLexerError.prototype.name = 'JisonLexerError';

var lexer = {

EOF:1,

ERROR:2,

parseError:function parseError(str, hash) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
            return this.yy.parser.parseError(str, hash) || this.ERROR;
        } else {
            throw new this.JisonLexerError(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this._signaled_error_token = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        if (!this._input) {
            this.done = true;
            return null;
        }
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        // Count the linenumber up when we hit the LF (or a stand-alone CR).
        // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
        // and we advance immediately past the LF as well, returning both together as if
        // it was all a single 'character' only.
        var slice_len = 1;
        var lines = false;
        if (ch === '\n') {
            lines = true;
        } else if (ch === '\r') {
            lines = true;
            var ch2 = this._input[1];
            if (ch2 === '\n') {
                slice_len++;
                ch += ch2;
                this.yytext += ch2;
                this.yyleng++;
                this.offset++;
                this.match += ch2;
                this.matched += ch2;
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
            }
        }
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(slice_len);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - len);
        this.matched = this.matched.substr(0, this.matched.length - len);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }

        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = (lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                + oldLines[oldLines.length - lines.length].length - lines[0].length :
                this.yylloc.first_column - len);

        if (this.options.ranges) {
            this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng - len;
        }
        this.yyleng = this.yytext.length;
        this.done = false;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            // when the parseError() call returns, we MUST ensure that the error is registered.
            // We accomplish this by signaling an 'error' token to be produced for the current
            // .lex() run.
            this._signaled_error_token = (this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: this.match,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                lexer: this
            }) || this.ERROR);
        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// return (part of the) already matched input, i.e. for error messages
pastInput:function (maxSize) {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        if (maxSize < 0)
            maxSize = past.length;
        else if (!maxSize)
            maxSize = 20;
        return (past.length > maxSize ? '...' + past.substr(-maxSize) : past);
    },

// return (part of the) upcoming input, i.e. for error messages
upcomingInput:function (maxSize) {
        var next = this.match;
        if (maxSize < 0)
            maxSize = next.length + this._input.length;
        else if (!maxSize)
            maxSize = 20;
        if (next.length < maxSize) {
            next += this._input.substr(0, maxSize - next.length);
        }
        return (next.length > maxSize ? next.substr(0, maxSize) + '...' : next);
    },

// return a string which displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput().replace(/\s/g, ' ');
        var c = new Array(pre.length + 1).join('-');
        return pre + this.upcomingInput().replace(/\s/g, ' ') + '\n' + c + '^';
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset + this.yyleng];
        }
        this.offset += this.yyleng;
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        } else if (this._signaled_error_token) {
            // produce one 'error' token as .parseError() in reject() did not guarantee a failure signal by throwing an exception!
            token = this._signaled_error_token;
            this._signaled_error_token = false;
            return token;
        }
        return false;
    },

// return next match in input
next:function () {
        function clear() {
            this.yytext = '';
            this.yyleng = 0;
            this.match = '';
            this.matches = false;
            this._more = false;
            this._backtrack = false;
        }

        if (this.done) {
            clear.call(this);
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            clear.call(this);
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === '') {
            clear.call(this);
            this.done = true;
            return this.EOF;
        } else {
            token = this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: this.match + this._input,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                lexer: this
            }) || this.ERROR;
            if (token === this.ERROR) {
                // we can try to recover from a lexer error that parseError() did not 'recover' for us, by moving forward at least one character at a time:
                if (!this.match.length) {
                    this.input();
                }
            }
            return token;
        }
    },

// return next match that has a token
lex:function lex() {
        var r;
        // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
        if (typeof this.options.pre_lex === 'function') {
            r = this.options.pre_lex.call(this);
        }
        while (!r) {
            r = this.next();
        }
        if (typeof this.options.post_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.post_lex.call(this, r) || r;
        }
        return r;
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions['INITIAL'].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return 'INITIAL';
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
JisonLexerError: JisonLexerError,
performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

var YYSTATE = YY_START;
switch($avoiding_name_collisions) {
case 0 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \s+ */ 
 /* skip whitespace */ 
break;
default:
  return this.simpleCaseActionClusters[$avoiding_name_collisions];
}
},
simpleCaseActionClusters: {

  /*! Conditions:: INITIAL */ 
  /*! Rule::       [0-9]+(\.[0-9]+)?\b */ 
   1 : 129,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \* */ 
   2 : 42,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \/ */ 
   3 : 47,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       - */ 
   4 : 45,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \+ */ 
   5 : 43,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \^ */ 
   6 : 94,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       ! */ 
   7 : 33,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       % */ 
   8 : 37,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \( */ 
   9 : 40,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \) */ 
   10 : 41,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       PI */ 
   11 : 130,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       E */ 
   12 : 69,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       $ */ 
   13 : 128,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       . */ 
   14 : 'INVALID'
},
rules: [
/^(?:\s+)/,
/^(?:[0-9]+(\.[0-9]+)?\b)/,
/^(?:\*)/,
/^(?:\/)/,
/^(?:-)/,
/^(?:\+)/,
/^(?:\^)/,
/^(?:!)/,
/^(?:%)/,
/^(?:\()/,
/^(?:\))/,
/^(?:PI)/,
/^(?:E)/,
/^(?:$)/,
/^(?:.)/
],
conditions: {
  "INITIAL": {
    rules: [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14
    ],
    inclusive: true
  }
}
};

// lexer.JisonLexerError = JisonLexerError;
return lexer;
})();
parser.lexer = lexer;

function Parser() {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;
// parser.JisonParserError = JisonParserError;

return new Parser();
})();




if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calculator;
exports.Parser = calculator.Parser;
exports.parse = function () {
  return calculator.parse.apply(calculator, arguments);
};

}
